/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/webpack/buildin/module.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/module.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_mobile_vh_fix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/mobile-vh-fix.js */ "./js/utils/mobile-vh-fix.js");
/* harmony import */ var _modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/modals/init-modals */ "./js/modules/modals/init-modals.js");
/* harmony import */ var _modules_form_validate_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/form-validate/form */ "./js/modules/form-validate/form.js");
/* harmony import */ var _modules_select_custom_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/select/custom-select */ "./js/modules/select/custom-select.js");
/* harmony import */ var _modules_input_file_init_upload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/input-file/init-upload */ "./js/modules/input-file/init-upload.js");
/* harmony import */ var _modules_header_init_header_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/header/init-header.js */ "./js/modules/header/init-header.js");
/* harmony import */ var _modules_aside_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/aside.js */ "./js/modules/aside.js");
/* harmony import */ var _vendor_swiper_price_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vendor/swiper-price.js */ "./js/vendor/swiper-price.js");
/* harmony import */ var _modules_advantages_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/advantages.js */ "./js/modules/advantages.js");
/* harmony import */ var _modules_parallax_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/parallax.js */ "./js/modules/parallax.js");
/* harmony import */ var _modules_timer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/timer.js */ "./js/modules/timer.js");











var swiperPrice = document.querySelector('[data-swiper-price]');
window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  Object(_utils_mobile_vh_fix_js__WEBPACK_IMPORTED_MODULE_0__["mobileVhFix"])();

  // Modules
  // ---------------------------------
  Object(_modules_header_init_header_js__WEBPACK_IMPORTED_MODULE_5__["initHeader"])();
  Object(_modules_aside_js__WEBPACK_IMPORTED_MODULE_6__["mooveAside"])();
  Object(_vendor_swiper_price_js__WEBPACK_IMPORTED_MODULE_7__["initSwiperPrice"])(swiperPrice);
  Object(_modules_advantages_js__WEBPACK_IMPORTED_MODULE_8__["arrangeAdvantages"])();
  Object(_modules_parallax_js__WEBPACK_IMPORTED_MODULE_9__["parallax"])();
  Object(_modules_timer_js__WEBPACK_IMPORTED_MODULE_10__["startTimer"])();

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    Object(_modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__["initModals"])();
    Object(_modules_input_file_init_upload__WEBPACK_IMPORTED_MODULE_4__["uploadFile"])();
    Object(_modules_input_file_init_upload__WEBPACK_IMPORTED_MODULE_4__["uploadImageDrop"])();
    var select = new _modules_select_custom_select__WEBPACK_IMPORTED_MODULE_3__["CustomSelect"]();
    select.init();
    var form = new _modules_form_validate_form__WEBPACK_IMPORTED_MODULE_2__["Form"]();
    window.form = form;
    form.init();
  });
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

/***/ }),

/***/ "./js/modules/advantages.js":
/*!**********************************!*\
  !*** ./js/modules/advantages.js ***!
  \**********************************/
/*! exports provided: arrangeAdvantages */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrangeAdvantages", function() { return arrangeAdvantages; });
var elements = document.querySelectorAll('[data-advantage]');
var icons = document.querySelectorAll('[data-advantage-icon]');
var howMany = elements.length;
var lastIndex = elements.length - 1;
var fullDegree = 360;
var pixelPerfect = true;
var minDegree = 0;
var maxDegree = 360;
function arrangeAdvantages() {
  if (howMany && window.matchMedia('(min-width: 768px)').matches) {
    elements[0].style = "transform: rotate(".concat(minDegree, "deg);");
    icons[0].style = "transform: rotate(".concat(minDegree * -1, "deg);");
    elements[lastIndex].style = "transform: rotate(".concat(maxDegree - fullDegree / howMany, "deg);");
    icons[lastIndex].style = "transform: rotate(".concat((maxDegree - fullDegree / howMany) * -1, "deg);");
    var degree = fullDegree / howMany;
    var newDegree = 0;
    elements.forEach(function (element, index) {
      if (index !== 0 && index !== howMany - 1) {
        newDegree += degree;
        element.style = "transform: rotate(".concat(newDegree, "deg);");
        icons[index].style = "transform: rotate(".concat(newDegree * -1, "deg);");
      }
    });
    if (pixelPerfect && howMany === 6) {
      elements[2].style = 'transform: rotate(0deg);';
      icons[2].style = 'transform: rotate(0deg);';
      elements[0].style = 'transform: rotate(60deg);';
      icons[0].style = 'transform: rotate(-60deg);';
      elements[3].style = 'transform: rotate(120deg);';
      icons[3].style = 'transform: rotate(-120deg);';
      elements[1].style = 'transform: rotate(180deg);';
      icons[1].style = 'transform: rotate(-180deg);';
    }
  }
}
function handleResize() {
  if (window.innerWidth <= 768) {
    elements.forEach(function (element) {
      element.style = '';
    });
    icons.forEach(function (icon) {
      icon.style = '';
    });
  } else {
    arrangeAdvantages();
  }
}
window.addEventListener('resize', handleResize);
handleResize();


/***/ }),

/***/ "./js/modules/aside.js":
/*!*****************************!*\
  !*** ./js/modules/aside.js ***!
  \*****************************/
/*! exports provided: mooveAside */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mooveAside", function() { return mooveAside; });
var aside = document.querySelector('[data-aside]');
function mooveAside() {
  if (aside) {
    aside.addEventListener('click', function () {
      if (!aside.classList.contains('aside--open')) {
        aside.classList.add('aside--open');
      } else {
        aside.classList.remove('aside--open');
      }
    });
  }
}

/***/ }),

/***/ "./js/modules/form-validate/callback.js":
/*!**********************************************!*\
  !*** ./js/modules/form-validate/callback.js ***!
  \**********************************************/
/*! exports provided: callbacks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "callbacks", function() { return callbacks; });
var baseSuccessCallback = function baseSuccessCallback(event) {
  event.preventDefault();
  // В данном колбеке бэкендер, либо разработчик при необходимости будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки или успешную отправку формы на сервер
};

var baseErrorCallback = function baseErrorCallback(event) {
  event.preventDefault();
  // Данный коллбек используется при необходимости выполнить какое-либо действие помимо показа ошибок при попытке отправить неккорректные данные, он не связан с запросами на сервер
};

var callbacks = {
  base: {
    // Сбросс формы
    reset: true,
    // Таймаут сброса формы
    resetTimeout: 500,
    successCallback: baseSuccessCallback,
    errorCallback: baseErrorCallback
  }
};

/***/ }),

/***/ "./js/modules/form-validate/form.js":
/*!******************************************!*\
  !*** ./js/modules/form-validate/form.js ***!
  \******************************************/
/*! exports provided: Form */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Form", function() { return Form; });
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator */ "./js/modules/form-validate/validator.js");
/* harmony import */ var _callback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callback */ "./js/modules/form-validate/callback.js");
/* harmony import */ var _init_phone_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./init-phone-input */ "./js/modules/form-validate/init-phone-input.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Form = /*#__PURE__*/function () {
  function Form() {
    _classCallCheck(this, Form);
    this._validator = new _validator__WEBPACK_IMPORTED_MODULE_0__["Validator"]();
    this._initPhoneInput = _init_phone_input__WEBPACK_IMPORTED_MODULE_2__["initPhoneInput"];
    this._callbacks = _callback__WEBPACK_IMPORTED_MODULE_1__["callbacks"];
    this._validState = false;
  }
  _createClass(Form, [{
    key: "_resetSelect",
    value: function _resetSelect(select) {
      var nativeSelect = select.querySelector('select');
      var activeIndex = nativeSelect.options.selectedIndex;
      var selectedOption = nativeSelect.options[activeIndex];
      var buttonText = select.querySelector('.custom-select__text');
      var selectItems = select.querySelectorAll('.custom-select__item');
      buttonText.textContent = selectedOption.textContent;
      selectItems.forEach(function (item, index) {
        if (index === activeIndex - 1) {
          item.setAttribute('aria-selected', 'true');
          return;
        }
        item.setAttribute('aria-selected', 'false');
      });
      if (!nativeSelect.value) {
        select.classList.remove('not-empty');
        select.classList.remove('is-valid');
      }
    }
  }, {
    key: "_resetSelects",
    value: function _resetSelects(form) {
      var _this = this;
      var selects = form.querySelectorAll('[data-select]');
      selects.forEach(function (select) {
        _this._resetSelect(select);
      });
    }
  }, {
    key: "reset",
    value: function reset(form) {
      var _this2 = this;
      this._validator._reset();
      var parent = form.closest('[data-form-validate]');
      form.reset();
      form.querySelectorAll('.is-invalid').forEach(function (item) {
        return item.classList.remove('is-invalid');
      });
      form.querySelectorAll('.is-valid').forEach(function (item) {
        return item.classList.remove('is-valid');
      });
      form.querySelectorAll('.input-message').forEach(function (item) {
        return item.remove();
      });
      parent.querySelectorAll('.input-message').forEach(function (item) {
        return item.remove();
      });
      setTimeout(function () {
        _this2._resetSelects(form);
      });
    }
  }, {
    key: "initPhoneInput",
    value: function initPhoneInput(parent) {
      this._initPhoneInput(parent);
    }
  }, {
    key: "validateForm",
    value: function validateForm(event) {
      return this._validator.validateForm(event);
    }
  }, {
    key: "validateFormElement",
    value: function validateFormElement(item) {
      return this._validator.validateFormElement(item);
    }
  }, {
    key: "createStates",
    value: function createStates(item) {
      return this._validator._createStates(item);
    }
  }, {
    key: "_onFormSubmit",
    value: function _onFormSubmit(event) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this._validState = this.validateForm(event);
      if (this._validState && callback) {
        this._callbacks[callback].successCallback(event);
        if (this._callbacks[callback].reset) {
          setTimeout(function () {
            _this3.reset(event.target);
          }, this._callbacks[callback].resetTimeout ? this._callbacks[callback].resetTimeout : 500);
        }
        return;
      }
      if (!this._validState && callback) {
        this._callbacks[callback].errorCallback(event);
        return;
      }
    }
  }, {
    key: "_onFormInput",
    value: function _onFormInput(item) {
      this.validateFormElement(item);
      this.createStates(item);
    }
  }, {
    key: "_initValidate",
    value: function _initValidate(parent) {
      var _this4 = this;
      var form = parent.querySelector('form');
      if (!form) {
        return;
      }
      var phoneParents = form.querySelectorAll('[data-validate-type="phone"]');
      phoneParents.forEach(function (item) {
        return _this4._initPhoneInput(item);
      });
      var callback = parent.dataset.callback;
      form.noValidate = true;
      form.addEventListener('submit', function (event) {
        _this4._onFormSubmit(event, callback);
      });
      form.addEventListener('input', function (event) {
        _this4._onFormInput(event.target);
      });
      form.addEventListener('reset', function (event) {
        _this4.reset(event.target);
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this5 = this;
      this._validateParent = document.querySelectorAll('[data-form-validate]');
      if (!this._validateParent.length) {
        return;
      }
      this._validateParent.forEach(function (parent) {
        return _this5._initValidate(parent);
      });
    }
  }]);
  return Form;
}();

/***/ }),

/***/ "./js/modules/form-validate/init-phone-input.js":
/*!******************************************************!*\
  !*** ./js/modules/form-validate/init-phone-input.js ***!
  \******************************************************/
/*! exports provided: initPhoneInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPhoneInput", function() { return initPhoneInput; });
var baseCountryCode = '+7';
var baseMatrix = ' (___) ___ __ __';
var phoneLength = baseCountryCode.length + baseMatrix.length;
var onPhoneInputInput = function onPhoneInputInput(e) {
  var matrix = "".concat(baseCountryCode).concat(baseMatrix);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = e.target.value.replace(/\D/g, '');
  if (def.length >= val.length) {
    val = def;
  }
  e.target.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};
var onPhoneInputFocus = function onPhoneInputFocus(_ref) {
  var target = _ref.target;
  if (!target.value) {
    target.value = baseCountryCode;
  }
  target.addEventListener('input', onPhoneInputInput);
  target.addEventListener('blur', onPhoneInputBlur);
  target.addEventListener('keydown', onPhoneInputKeydown);
  target.addEventListener('paste', onPhoneInputPaste);
  target.addEventListener('click', onPhoneInputClick);
};
var onPhoneInputClick = function onPhoneInputClick(e) {
  if (e.target.selectionStart < 4) {
    e.preventDefault();
    e.target.setSelectionRange(3, 3);
  }
};
var onPhoneInputPaste = function onPhoneInputPaste(e) {
  e.target.setSelectionRange(0, 0);
  if (!e.target.selectionStart) {
    setTimeout(function () {
      if (e.target.value.startsWith('+7')) {
        return;
      }
      if (e.target.value.startsWith('+8')) {
        e.target.value = "+7 ".concat(e.target.value.slice(3));
        return;
      }
      e.target.value = '';
    });
  }
};
var onPhoneInputKeydown = function onPhoneInputKeydown(e) {
  if (e.target.selectionStart < 4 && (e.keyCode === 37 || e.keyCode === 13)) {
    e.preventDefault();
    e.target.setSelectionRange(3, 3);
  }
};
var onPhoneInputBlur = function onPhoneInputBlur(_ref2) {
  var target = _ref2.target;
  if (target.value === baseCountryCode) {
    var parent = target.closest('[data-validate-type="phone"]');
    target.value = '';
    if (!parent.hasAttribute('data-required')) {
      parent.classList.remove('is-valid');
      parent.classList.remove('is-invalid');
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
    }
    parent.classList.remove('not-empty');
    target.removeEventListener('input', onPhoneInputInput);
    target.removeEventListener('blur', onPhoneInputBlur);
    target.removeEventListener('keydown', onPhoneInputKeydown);
    target.removeEventListener('paste', onPhoneInputPaste);
    target.removeEventListener('click', onPhoneInputClick);
  }
};
var initPhoneInput = function initPhoneInput(parent) {
  var input = parent.querySelector('input');
  parent.dataset.phoneLength = phoneLength;
  input.addEventListener('focus', onPhoneInputFocus);
};

/***/ }),

/***/ "./js/modules/form-validate/matrix.js":
/*!********************************************!*\
  !*** ./js/modules/form-validate/matrix.js ***!
  \********************************************/
/*! exports provided: matrixReplace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matrixReplace", function() { return matrixReplace; });
var matrixReplace = function matrixReplace(item, matrix, RegEx) {
  if (!matrix) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат матрицы: data-matrix=""');
    item.value = '';
    return;
  }
  if (!RegEx) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат ограничений: data-matrix-limitations=""');
    item.value = '';
    return;
  }
  var def = matrix.replace(RegEx, '');
  var val = item.value.replace(RegEx, '');
  var i = 0;
  if (def.length >= val.length) {
    val = def;
  }
  item.value = matrix.replace(/./g, function (a) {
    if (/[_\^]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

/***/ }),

/***/ "./js/modules/form-validate/regular-expression.js":
/*!********************************************************!*\
  !*** ./js/modules/form-validate/regular-expression.js ***!
  \********************************************************/
/*! exports provided: getLimitationsRegEx, getMatrixLimitationsRegEx, getMailRegEx */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLimitationsRegEx", function() { return getLimitationsRegEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatrixLimitationsRegEx", function() { return getMatrixLimitationsRegEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMailRegEx", function() { return getMailRegEx; });
var setLimitationError = function setLimitationError(limitation) {
  // eslint-disable-next-line no-console
  console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F(data-limitation=\"".concat(limitation, "\") - \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439."));
};
var getLimitationsRegEx = function getLimitationsRegEx(limitation) {
  switch (limitation) {
    case 'digit':
      return /[^\d]/g;
    case 'name':
      return /[^a-zA-Zа-яёА-ЯЁ\-\s]/g;
    case 'letters':
      return /[^a-zA-Zа-яёА-ЯЁ\s]/g;
    case 'letters-and-digit':
      return /[^a-zA-Zа-яёА-ЯЁ\s\d]/g;
    case 'cyrillic':
      return /[^а-яёА-ЯЁ\s]/g;
    case 'latin':
      return /[^a-zA-Z\s]/g;
    default:
      return setLimitationError(limitation);
  }
};
var getMatrixLimitationsRegEx = function getMatrixLimitationsRegEx(matrix) {
  switch (matrix) {
    case 'digit':
      return /[^\d]/g;
    case 'name':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\-]]/g;
    case 'letters':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z]/g;
    case 'letters-and-digit':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\d]/g;
    case 'cyrillic':
      return /[^\а-яё\А-ЯЁ]/g;
    case 'latin':
      return /[^\a-z\A-Z]/g;
    default:
      return false;
  }
};
var getMailRegEx = function getMailRegEx() {
  return /[a-zA-Zа-яёА-ЯЁ0-9]{1}([a-zA-Zа-яёА-ЯЁ0-9\-_\.]{1,})?@[a-zA-Zа-яёА-ЯЁ0-9\-]{1}([a-zA-Zа-яёА-ЯЁ0-9.\-]{1,})?[a-zA-Zа-яёА-ЯЁ0-9\-]{1}\.[a-zA-Zа-яёА-ЯЁ]{2,6}/;
};

/***/ }),

/***/ "./js/modules/form-validate/render-message.js":
/*!****************************************************!*\
  !*** ./js/modules/form-validate/render-message.js ***!
  \****************************************************/
/*! exports provided: Message */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Message", function() { return Message; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Message = /*#__PURE__*/function () {
  function Message() {
    _classCallCheck(this, Message);
    this._baseErrorText = 'Это поле является обязательным';
  }
  _createClass(Message, [{
    key: "_messageTemplate",
    value: function _messageTemplate(message, state) {
      var cssClass = state === 'valid' ? 'is-valid' : 'is-invalid';
      return "<span class=\"input-message ".concat(cssClass, "\">").concat(message, "</span>");
    }
  }, {
    key: "removeMessage",
    value: function removeMessage(parent) {
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
    }
  }, {
    key: "renderMessage",
    value: function renderMessage(parent, message, state) {
      this.removeMessage(parent);
      parent.insertAdjacentHTML('beforeend', this._messageTemplate(message, state));
    }
  }]);
  return Message;
}();

/***/ }),

/***/ "./js/modules/form-validate/validator.js":
/*!***********************************************!*\
  !*** ./js/modules/form-validate/validator.js ***!
  \***********************************************/
/*! exports provided: Validator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Validator", function() { return Validator; });
/* harmony import */ var _regular_expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regular-expression */ "./js/modules/form-validate/regular-expression.js");
/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matrix */ "./js/modules/form-validate/matrix.js");
/* harmony import */ var _render_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render-message */ "./js/modules/form-validate/render-message.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Validator = /*#__PURE__*/function () {
  function Validator() {
    _classCallCheck(this, Validator);
    this._getLimitationsRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getLimitationsRegEx"];
    this._getMatrixLimitationsRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getMatrixLimitationsRegEx"];
    this._getMailRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getMailRegEx"];
    this._matrixReplace = _matrix__WEBPACK_IMPORTED_MODULE_1__["matrixReplace"];
    this._message = new _render_message__WEBPACK_IMPORTED_MODULE_2__["Message"]();
    this._invalidNotEmpty = false;
    this._validState = true;
    this._submitEvent = false;
  }
  _createClass(Validator, [{
    key: "_createStates",
    value: function _createStates(item) {
      var _this = this;
      this._validState = true;
      this._invalidNotEmpty = false;
      var parent = item.closest('[data-form-validate]');
      var formElements = parent.querySelectorAll('input', 'select', 'textarea');
      formElements.forEach(function (element) {
        if (element.getAttribute('aria-invalid') === 'true') {
          _this._validState = false;
          if (element.value) {
            _this._invalidNotEmpty = true;
          }
        }
      });
      this._validateFormParent(parent);
    }
  }, {
    key: "_renderMessage",
    value: function _renderMessage(trigger, parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      if (!trigger) {
        parent.classList.add('is-invalid');
        if (parent.hasAttribute('data-message-base') && !input.value) {
          this._message.renderMessage(parent, parent.dataset.messageBase, 'invalid');
        } else if (parent.hasAttribute('data-message-extra') && input.value) {
          this._message.renderMessage(parent, parent.dataset.messageExtra, 'invalid');
        } else if (!parent.hasAttribute('data-message-extra') && parent.hasAttribute('data-message-base') && input.value) {
          this._message.renderMessage(parent, parent.dataset.messageBase, 'invalid');
        } else {
          this._message.removeMessage(parent);
        }
      } else {
        if (parent.hasAttribute('data-message-success')) {
          this._message.renderMessage(parent, parent.dataset.messageSuccess, 'valid');
        } else {
          this._message.removeMessage(parent);
        }
      }
    }
  }, {
    key: "_setItemValidState",
    value: function _setItemValidState(parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      parent.classList.add('is-valid');
      parent.classList.remove('is-invalid');
      input.setAttribute('aria-invalid', 'false');
      this._message.removeMessage(parent);
    }
  }, {
    key: "_setItemInvalidState",
    value: function _setItemInvalidState(parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      parent.classList.remove('is-valid');
      input.setAttribute('aria-invalid', 'true');
    }
  }, {
    key: "_simpleLimitation",
    value: function _simpleLimitation(item, limitation) {
      item.value = item.value.replace(this._getLimitationsRegEx(limitation), '');
    }
  }, {
    key: "_matrixLimitation",
    value: function _matrixLimitation(item, matrix, limitation) {
      this._matrixReplace(item, matrix, limitation);
    }
  }, {
    key: "_validateTextInput",
    value: function _validateTextInput(parent, input) {
      var flag = true;
      if (input.value.length >= (+input.getAttribute('minlength') || 1)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateMatrixInput",
    value: function _validateMatrixInput(parent, input) {
      var flag = true;
      if (input.value.length === input.closest('[data-matrix]').dataset.matrix.length) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateEmailInput",
    value: function _validateEmailInput(parent, input) {
      var flag = true;
      if (new RegExp(this._getMailRegEx(), '').test(input.value)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validatePhoneInput",
    value: function _validatePhoneInput(parent, input) {
      var flag = true;
      if (input.value.length >= +parent.dataset.phoneLength) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateCheckbox",
    value: function _validateCheckbox(parent, input) {
      var flag = true;
      if (input.checked) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_findSelectedOption",
    value: function _findSelectedOption(options) {
      var flag = false;
      options.forEach(function (option) {
        if (option.value && option.selected) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_validateSelect",
    value: function _validateSelect(parent, input) {
      var options = input.querySelectorAll('option');
      var customSelectText = parent.querySelector('.custom-select__text');
      input.setAttribute('aria-invalid', 'false');
      var flag = true;
      if (this._findSelectedOption(options)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        parent.classList.remove('not-empty');
        customSelectText.innerHTML = '';
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_returnCheckedElements",
    value: function _returnCheckedElements(inputs) {
      var flag = false;
      inputs.forEach(function (input) {
        if (input.checked) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_removeGroupAria",
    value: function _removeGroupAria(inputs) {
      inputs.forEach(function (input) {
        if (!input.checked) {
          input.removeAttribute('aria-required');
          input.removeAttribute('aria-invalid');
        } else {
          input.setAttribute('aria-required', true);
          input.setAttribute('aria-invalid', false);
        }
      });
    }
  }, {
    key: "_setGroupAria",
    value: function _setGroupAria(inputs) {
      inputs.forEach(function (input) {
        input.setAttribute('aria-required', true);
        input.setAttribute('aria-invalid', true);
      });
    }
  }, {
    key: "_validateToggleGroup",
    value: function _validateToggleGroup(parent) {
      var formElements = parent.querySelectorAll('input');
      var flag = true;
      if (this._returnCheckedElements(formElements)) {
        this._removeGroupAria(formElements);
        parent.classList.remove('is-invalid');
        parent.classList.add('is-valid');
        this._message.removeMessage(parent);
      } else {
        this._setGroupAria(formElements);
        parent.classList.remove('is-valid');
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_customExample",
    value: function _customExample(parent, input) {
      var flag = true;
      if (!input.value.length) {
        parent.dataset.messageBase = 'Поле обязательно к заполнению';
        this._setItemInvalidState(parent, input);
        flag = false;
      } else if (input.value.length < input.minLength) {
        parent.dataset.messageBase = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C \u0432\u0432\u0435\u0441\u0442\u0438 \u0435\u0449\u0451 ".concat(input.minLength - input.value.length, " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432");
        this._setItemInvalidState(parent, input);
        flag = false;
      } else if (input.value.length > input.minLength) {
        parent.dataset.messageBase = "\u0412\u044B \u0432\u0432\u0435\u043B\u0438 ".concat(input.value.length - input.minLength, " \u043B\u0438\u0448\u043D\u0438\u0445 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432");
        this._setItemInvalidState(parent, input);
        flag = false;
      } else {
        parent.dataset.messageSuccess = 'Поле заполнено корректно';
        this._setItemValidState(parent, input);
        flag = true;
      }
      return flag;
    }
  }, {
    key: "_validateFile",
    value: function _validateFile(parent, input) {
      var flag = true;
      var sizeTest = parent.dataset.maxSize && input.files[0] ? input.files[0].size < +parent.dataset.maxSize : true;
      if (input.value && sizeTest) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_customUpload",
    value: function _customUpload(parent, input) {
      var flag = true;
      if (parent.classList.contains('is-invalid') || !input.files[0]) {
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateInput",
    value: function _validateInput(type, parent, input) {
      switch (type) {
        case 'text':
          return this._validateTextInput(parent, input);
        case 'matrix':
          return this._validateMatrixInput(parent, input);
        case 'email':
          return this._validateEmailInput(parent, input);
        case 'phone':
          return this._validatePhoneInput(parent, input);
        case 'checkbox':
          return this._validateCheckbox(parent, input);
        case 'select':
          return this._validateSelect(parent, input);
        case 'toggle-group':
          return this._validateToggleGroup(parent, input);
        case 'file':
          return this._validateFile(parent, input);
        case 'custom-upload':
          return this._customUpload(parent, input);
        case 'custom-example':
          return this._customExample(parent, input);
        default:
          return false;
      }
    }
  }, {
    key: "_baseParentValidate",
    value: function _baseParentValidate(formParent) {
      if (!this._submitEvent) {
        return;
      }
      if (!this._invalidNotEmpty && !this._validState) {
        this._message.renderMessage(formParent, formParent.dataset.messageBase, 'invalid');
        return;
      }
      if (this._invalidNotEmpty && !this._validState) {
        this._message.renderMessage(formParent, formParent.dataset.messageExtra || formParent.dataset.messageBase, 'invalid');
        return;
      }
      if (this._validState) {
        this._message.removeMessage(formParent);
        return;
      }
    }
  }, {
    key: "_validateParent",
    value: function _validateParent(formParent, type) {
      switch (type) {
        case 'base':
          return this._baseParentValidate(formParent);
        default:
          return false;
      }
    }
  }, {
    key: "validateFormElement",
    value: function validateFormElement(formElement) {
      var fullValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parent = formElement.closest('[data-validate-type]');
      if (!parent) {
        return;
      }
      if (!parent.hasAttribute('data-required')) {
        var removeElement = parent.querySelector('input') || parent.querySelector('select') || parent.querySelector('textarea');
        if (!removeElement.value) {
          parent.classList.remove('is-valid');
          parent.classList.remove('is-invalid');
        }
      }
      var onInputValidate = parent.hasAttribute('data-on-input-validate');
      if (parent.hasAttribute('data-limitation')) {
        this._simpleLimitation(formElement, parent.dataset.limitation);
      }
      if (parent.dataset.validateType === 'matrix') {
        this._matrixLimitation(formElement, parent.dataset.matrix, this._getMatrixLimitationsRegEx(parent.dataset.matrixLimitation));
      }
      var isValid = this._validateInput(parent.dataset.validateType, parent, formElement);
      if (onInputValidate || fullValidate) {
        this._renderMessage(isValid, parent, formElement);
      }
    }
  }, {
    key: "_fullValidate",
    value: function _fullValidate(items) {
      var _this2 = this;
      var isValid = true;
      items.forEach(function (item) {
        var formElement = item.querySelector('input') || item.querySelector('select') || item.querySelector('textarea');
        _this2.validateFormElement(formElement, true);
        if (item.classList.contains('is-invalid')) {
          isValid = false;
        }
      });
      return isValid;
    }
  }, {
    key: "validateForm",
    value: function validateForm(event) {
      if (event.type === 'submit') {
        this._submitEvent = true;
      }
      var validateItems = event.target.querySelectorAll('[data-validate-type]');
      var result = this._fullValidate(validateItems);
      this._createStates(event.target);
      return result;
    }
  }, {
    key: "_reset",
    value: function _reset() {
      this._submitEvent = false;
    }
  }, {
    key: "_validateFormParent",
    value: function _validateFormParent(element) {
      var formParent = element.closest('[data-form-validate]');
      if (formParent.dataset.parentValidate) {
        this._validateParent(formParent, formParent.dataset.parentValidate);
      }
    }
  }]);
  return Validator;
}();

/***/ }),

/***/ "./js/modules/header/burger.js":
/*!*************************************!*\
  !*** ./js/modules/header/burger.js ***!
  \*************************************/
/*! exports provided: Burger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Burger", function() { return Burger; });
/* harmony import */ var _scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scroll-lock */ "./js/modules/header/scroll-lock.js");
/* harmony import */ var _scroll_lock__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scroll_lock__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./focus-lock */ "./js/modules/header/focus-lock.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Burger = /*#__PURE__*/function () {
  function Burger() {
    _classCallCheck(this, Burger);
    this._header = document.querySelector('[data-header]');
    this._burger = document.querySelector('[data-burger]');
    this._scrollLock = _scroll_lock__WEBPACK_IMPORTED_MODULE_0___default.a;
    this._focusLock = new _focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._isMenuOpen = false;
    this._onBurgerClick = this._onBurgerClick.bind(this);
    this._onDocumentKeydown = this._onDocumentKeydown.bind(this);
    this._onDocumentClick = this._onDocumentClick.bind(this);
  }
  _createClass(Burger, [{
    key: "init",
    value: function init() {
      if (!this._burger) {
        return;
      }
      this._burger.addEventListener('click', this._onBurgerClick);
    }
  }, {
    key: "_openMenu",
    value: function _openMenu() {
      this._isMenuOpen = true;
      this._header.classList.add('is-open');
      this._scrollLock.disablePageScroll();
      document.addEventListener('keydown', this._onDocumentKeydown);
      document.addEventListener('click', this._onDocumentClick);
      this._focusLock.lock('[data-header]');
      if (window.ls) {
        window.ls.stop();
      }
    }
  }, {
    key: "_closeMenu",
    value: function _closeMenu() {
      this._isMenuOpen = false;
      this._header.classList.remove('is-open');
      this._scrollLock.enablePageScroll();
      this._focusLock.unlock('[data-header]');
      document.removeEventListener('keydown', this._onDocumentKeydown);
      document.removeEventListener('click', this._onDocumentClick);
      if (window.ls) {
        window.ls.start();
      }
    }
  }, {
    key: "_onBurgerClick",
    value: function _onBurgerClick() {
      if (this._isMenuOpen) {
        this._closeMenu();
      } else {
        this._openMenu();
      }
    }
  }, {
    key: "_onDocumentKeydown",
    value: function _onDocumentKeydown(evt) {
      if (evt.key === 'Escape') {
        this._closeMenu();
      }
    }
  }, {
    key: "_onDocumentClick",
    value: function _onDocumentClick(evt) {
      if (evt.target.hasAttribute('data-close-menu')) {
        this._closeMenu();
      }
    }
  }]);
  return Burger;
}();

/***/ }),

/***/ "./js/modules/header/focus-lock.js":
/*!*****************************************!*\
  !*** ./js/modules/header/focus-lock.js ***!
  \*****************************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);
    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }
  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;
      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }
        if (this._focusableElements.length === 1) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
      }
      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();
        this._focusableElements[0].focus();
      }
      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();
        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);
      if (!lockedElement) {
        return;
      }
      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;
      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];
      if (this._endElement) {
        this._endElement.blur();
      }
      if (startElement && startFocus) {
        startElement.focus();
      }
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }
      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);
  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/modules/header/init-header.js":
/*!******************************************!*\
  !*** ./js/modules/header/init-header.js ***!
  \******************************************/
/*! exports provided: initHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initHeader", function() { return initHeader; });
/* harmony import */ var _burger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./burger */ "./js/modules/header/burger.js");

function initHeader() {
  var burger = new _burger__WEBPACK_IMPORTED_MODULE_0__["Burger"]();
  burger.init();
}

/***/ }),

/***/ "./js/modules/header/scroll-lock.js":
/*!******************************************!*\
  !*** ./js/modules/header/scroll-lock.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/
      var installedModules = {};
      /******/
      /******/ // The require function
      /******/
      function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) {
          /******/return installedModules[moduleId].exports;
          /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
          /******/i: moduleId,
          /******/l: false,
          /******/exports: {}
          /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
      }
      /******/
      /******/
      /******/ // expose the modules object (__webpack_modules__)
      /******/
      __webpack_require__.m = modules;
      /******/
      /******/ // expose the module cache
      /******/
      __webpack_require__.c = installedModules;
      /******/
      /******/ // define getter function for harmony exports
      /******/
      __webpack_require__.d = function (exports, name, getter) {
        /******/if (!__webpack_require__.o(exports, name)) {
          /******/Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/
      };
      /******/
      /******/ // define __esModule on exports
      /******/
      __webpack_require__.r = function (exports) {
        /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/
        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/
      /******/ // create a fake namespace object
      /******/ // mode & 1: value is a module id, require it
      /******/ // mode & 2: merge all properties of value into the ns
      /******/ // mode & 4: return value when already ns object
      /******/ // mode & 8|1: behave like require
      /******/
      __webpack_require__.t = function (value, mode) {
        /******/if (mode & 1) value = __webpack_require__(value);
        /******/
        if (mode & 8) return value;
        /******/
        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;
        /******/
        var ns = Object.create(null);
        /******/
        __webpack_require__.r(ns);
        /******/
        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/
        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
          return value[key];
        }.bind(null, key));
        /******/
        return ns;
        /******/
      };
      /******/
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/
      __webpack_require__.n = function (module) {
        /******/var getter = module && module.__esModule ? /******/function getDefault() {
          return module['default'];
        } : /******/function getModuleExports() {
          return module;
        };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
      };
      /******/
      /******/ // Object.prototype.hasOwnProperty.call
      /******/
      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      /******/ // __webpack_public_path__
      /******/
      __webpack_require__.p = "";
      /******/
      /******/
      /******/ // Load entry module and return exports
      /******/
      return __webpack_require__(__webpack_require__.s = 0);
      /******/
    }
    /************************************************************************/
    /******/([/* 0 */
    /***/function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);

      // CONCATENATED MODULE: ./src/tools.js
      var argumentAsArray = function argumentAsArray(argument) {
        return Array.isArray(argument) ? argument : [argument];
      };
      var isElement = function isElement(target) {
        return target instanceof Node;
      };
      var isElementList = function isElementList(nodeList) {
        return nodeList instanceof NodeList;
      };
      var eachNode = function eachNode(nodeList, callback) {
        if (nodeList && callback) {
          nodeList = isElementList(nodeList) ? nodeList : [nodeList];
          for (var i = 0; i < nodeList.length; i++) {
            if (callback(nodeList[i], i, nodeList.length) === true) {
              break;
            }
          }
        }
      };
      var throwError = function throwError(message) {
        return console.error("[scroll-lock] ".concat(message));
      };
      var arrayAsSelector = function arrayAsSelector(array) {
        if (Array.isArray(array)) {
          var selector = array.join(', ');
          return selector;
        }
      };
      var nodeListAsArray = function nodeListAsArray(nodeList) {
        var nodes = [];
        eachNode(nodeList, function (node) {
          return nodes.push(node);
        });
        return nodes;
      };
      var findParentBySelector = function findParentBySelector($el, selector) {
        var self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var $root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;
        if (self && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1) {
          return $el;
        }
        while (($el = $el.parentElement) && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) === -1) {
          ;
        }
        return $el;
      };
      var elementHasSelector = function elementHasSelector($el, selector) {
        var $root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
        var has = nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1;
        return has;
      };
      var elementHasOverflowHidden = function elementHasOverflowHidden($el) {
        if ($el) {
          var computedStyle = getComputedStyle($el);
          var overflowIsHidden = computedStyle.overflow === 'hidden';
          return overflowIsHidden;
        }
      };
      var elementScrollTopOnStart = function elementScrollTopOnStart($el) {
        if ($el) {
          if (elementHasOverflowHidden($el)) {
            return true;
          }
          var scrollTop = $el.scrollTop;
          return scrollTop <= 0;
        }
      };
      var elementScrollTopOnEnd = function elementScrollTopOnEnd($el) {
        if ($el) {
          if (elementHasOverflowHidden($el)) {
            return true;
          }
          var scrollTop = $el.scrollTop;
          var scrollHeight = $el.scrollHeight;
          var scrollTopWithHeight = scrollTop + $el.offsetHeight;
          return scrollTopWithHeight >= scrollHeight;
        }
      };
      var elementScrollLeftOnStart = function elementScrollLeftOnStart($el) {
        if ($el) {
          if (elementHasOverflowHidden($el)) {
            return true;
          }
          var scrollLeft = $el.scrollLeft;
          return scrollLeft <= 0;
        }
      };
      var elementScrollLeftOnEnd = function elementScrollLeftOnEnd($el) {
        if ($el) {
          if (elementHasOverflowHidden($el)) {
            return true;
          }
          var scrollLeft = $el.scrollLeft;
          var scrollWidth = $el.scrollWidth;
          var scrollLeftWithWidth = scrollLeft + $el.offsetWidth;
          return scrollLeftWithWidth >= scrollWidth;
        }
      };
      var elementIsScrollableField = function elementIsScrollableField($el) {
        var selector = 'textarea, [contenteditable="true"]';
        return elementHasSelector($el, selector);
      };
      var elementIsInputRange = function elementIsInputRange($el) {
        var selector = 'input[type="range"]';
        return elementHasSelector($el, selector);
      };
      // CONCATENATED MODULE: ./src/scroll-lock.js
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "disablePageScroll", function () {
        return disablePageScroll;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "enablePageScroll", function () {
        return enablePageScroll;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "getScrollState", function () {
        return getScrollState;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "clearQueueScrollLocks", function () {
        return clearQueueScrollLocks;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "getTargetScrollBarWidth", function () {
        return scroll_lock_getTargetScrollBarWidth;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "getCurrentTargetScrollBarWidth", function () {
        return scroll_lock_getCurrentTargetScrollBarWidth;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "getPageScrollBarWidth", function () {
        return getPageScrollBarWidth;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "getCurrentPageScrollBarWidth", function () {
        return getCurrentPageScrollBarWidth;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "addScrollableTarget", function () {
        return scroll_lock_addScrollableTarget;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "removeScrollableTarget", function () {
        return scroll_lock_removeScrollableTarget;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "addScrollableSelector", function () {
        return scroll_lock_addScrollableSelector;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "removeScrollableSelector", function () {
        return scroll_lock_removeScrollableSelector;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "addLockableTarget", function () {
        return scroll_lock_addLockableTarget;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "addLockableSelector", function () {
        return scroll_lock_addLockableSelector;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "setFillGapMethod", function () {
        return scroll_lock_setFillGapMethod;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "addFillGapTarget", function () {
        return scroll_lock_addFillGapTarget;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "removeFillGapTarget", function () {
        return scroll_lock_removeFillGapTarget;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "addFillGapSelector", function () {
        return scroll_lock_addFillGapSelector;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "removeFillGapSelector", function () {
        return scroll_lock_removeFillGapSelector;
      });
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "refillGaps", function () {
        return refillGaps;
      });
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          var ownKeys = Object.keys(source);
          if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
              return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
          }
          ownKeys.forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var FILL_GAP_AVAILABLE_METHODS = ['padding', 'margin', 'width', 'max-width', 'none'];
      var TOUCH_DIRECTION_DETECT_OFFSET = 3;
      var state = {
        scroll: true,
        queue: 0,
        scrollableSelectors: ['[data-scroll-lock-scrollable]'],
        lockableSelectors: ['body', '[data-scroll-lock-lockable]'],
        fillGapSelectors: ['body', '[data-scroll-lock-fill-gap]', '[data-scroll-lock-lockable]'],
        fillGapMethod: FILL_GAP_AVAILABLE_METHODS[0],
        //
        startTouchY: 0,
        startTouchX: 0
      };
      var disablePageScroll = function disablePageScroll(target) {
        if (state.queue <= 0) {
          state.scroll = false;
          scroll_lock_hideLockableOverflow();
          fillGaps();
        }
        scroll_lock_addScrollableTarget(target);
        state.queue++;
      };
      var enablePageScroll = function enablePageScroll(target) {
        state.queue > 0 && state.queue--;
        if (state.queue <= 0) {
          state.scroll = true;
          scroll_lock_showLockableOverflow();
          unfillGaps();
        }
        scroll_lock_removeScrollableTarget(target);
      };
      var getScrollState = function getScrollState() {
        return state.scroll;
      };
      var clearQueueScrollLocks = function clearQueueScrollLocks() {
        state.queue = 0;
      };
      var scroll_lock_getTargetScrollBarWidth = function getTargetScrollBarWidth($target) {
        var onlyExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (isElement($target)) {
          var currentOverflowYProperty = $target.style.overflowY;
          if (onlyExists) {
            if (!getScrollState()) {
              $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-overflow-y-property');
            }
          } else {
            $target.style.overflowY = 'scroll';
          }
          var width = scroll_lock_getCurrentTargetScrollBarWidth($target);
          $target.style.overflowY = currentOverflowYProperty;
          return width;
        } else {
          return 0;
        }
      };
      var scroll_lock_getCurrentTargetScrollBarWidth = function getCurrentTargetScrollBarWidth($target) {
        if (isElement($target)) {
          if ($target === document.body) {
            var documentWidth = document.documentElement.clientWidth;
            var windowWidth = window.innerWidth;
            var currentWidth = windowWidth - documentWidth;
            return currentWidth;
          } else {
            var borderLeftWidthCurrentProperty = $target.style.borderLeftWidth;
            var borderRightWidthCurrentProperty = $target.style.borderRightWidth;
            $target.style.borderLeftWidth = '0px';
            $target.style.borderRightWidth = '0px';
            var _currentWidth = $target.offsetWidth - $target.clientWidth;
            $target.style.borderLeftWidth = borderLeftWidthCurrentProperty;
            $target.style.borderRightWidth = borderRightWidthCurrentProperty;
            return _currentWidth;
          }
        } else {
          return 0;
        }
      };
      var getPageScrollBarWidth = function getPageScrollBarWidth() {
        var onlyExists = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return scroll_lock_getTargetScrollBarWidth(document.body, onlyExists);
      };
      var getCurrentPageScrollBarWidth = function getCurrentPageScrollBarWidth() {
        return scroll_lock_getCurrentTargetScrollBarWidth(document.body);
      };
      var scroll_lock_addScrollableTarget = function addScrollableTarget(target) {
        if (target) {
          var targets = argumentAsArray(target);
          targets.map(function ($targets) {
            eachNode($targets, function ($target) {
              if (isElement($target)) {
                $target.setAttribute('data-scroll-lock-scrollable', '');
              } else {
                throwError("\"".concat($target, "\" is not a Element."));
              }
            });
          });
        }
      };
      var scroll_lock_removeScrollableTarget = function removeScrollableTarget(target) {
        if (target) {
          var targets = argumentAsArray(target);
          targets.map(function ($targets) {
            eachNode($targets, function ($target) {
              if (isElement($target)) {
                $target.removeAttribute('data-scroll-lock-scrollable');
              } else {
                throwError("\"".concat($target, "\" is not a Element."));
              }
            });
          });
        }
      };
      var scroll_lock_addScrollableSelector = function addScrollableSelector(selector) {
        if (selector) {
          var selectors = argumentAsArray(selector);
          selectors.map(function (selector) {
            state.scrollableSelectors.push(selector);
          });
        }
      };
      var scroll_lock_removeScrollableSelector = function removeScrollableSelector(selector) {
        if (selector) {
          var selectors = argumentAsArray(selector);
          selectors.map(function (selector) {
            state.scrollableSelectors = state.scrollableSelectors.filter(function (sSelector) {
              return sSelector !== selector;
            });
          });
        }
      };
      var scroll_lock_addLockableTarget = function addLockableTarget(target) {
        if (target) {
          var targets = argumentAsArray(target);
          targets.map(function ($targets) {
            eachNode($targets, function ($target) {
              if (isElement($target)) {
                $target.setAttribute('data-scroll-lock-lockable', '');
              } else {
                throwError("\"".concat($target, "\" is not a Element."));
              }
            });
          });
          if (!getScrollState()) {
            scroll_lock_hideLockableOverflow();
          }
        }
      };
      var scroll_lock_addLockableSelector = function addLockableSelector(selector) {
        if (selector) {
          var selectors = argumentAsArray(selector);
          selectors.map(function (selector) {
            state.lockableSelectors.push(selector);
          });
          if (!getScrollState()) {
            scroll_lock_hideLockableOverflow();
          }
          scroll_lock_addFillGapSelector(selector);
        }
      };
      var scroll_lock_setFillGapMethod = function setFillGapMethod(method) {
        if (method) {
          if (FILL_GAP_AVAILABLE_METHODS.indexOf(method) !== -1) {
            state.fillGapMethod = method;
            refillGaps();
          } else {
            var methods = FILL_GAP_AVAILABLE_METHODS.join(', ');
            throwError("\"".concat(method, "\" method is not available!\nAvailable fill gap methods: ").concat(methods, "."));
          }
        }
      };
      var scroll_lock_addFillGapTarget = function addFillGapTarget(target) {
        if (target) {
          var targets = argumentAsArray(target);
          targets.map(function ($targets) {
            eachNode($targets, function ($target) {
              if (isElement($target)) {
                $target.setAttribute('data-scroll-lock-fill-gap', '');
                if (!state.scroll) {
                  scroll_lock_fillGapTarget($target);
                }
              } else {
                throwError("\"".concat($target, "\" is not a Element."));
              }
            });
          });
        }
      };
      var scroll_lock_removeFillGapTarget = function removeFillGapTarget(target) {
        if (target) {
          var targets = argumentAsArray(target);
          targets.map(function ($targets) {
            eachNode($targets, function ($target) {
              if (isElement($target)) {
                $target.removeAttribute('data-scroll-lock-fill-gap');
                if (!state.scroll) {
                  scroll_lock_unfillGapTarget($target);
                }
              } else {
                throwError("\"".concat($target, "\" is not a Element."));
              }
            });
          });
        }
      };
      var scroll_lock_addFillGapSelector = function addFillGapSelector(selector) {
        if (selector) {
          var selectors = argumentAsArray(selector);
          selectors.map(function (selector) {
            if (state.fillGapSelectors.indexOf(selector) === -1) {
              state.fillGapSelectors.push(selector);
              if (!state.scroll) {
                scroll_lock_fillGapSelector(selector);
              }
            }
          });
        }
      };
      var scroll_lock_removeFillGapSelector = function removeFillGapSelector(selector) {
        if (selector) {
          var selectors = argumentAsArray(selector);
          selectors.map(function (selector) {
            state.fillGapSelectors = state.fillGapSelectors.filter(function (fSelector) {
              return fSelector !== selector;
            });
            if (!state.scroll) {
              scroll_lock_unfillGapSelector(selector);
            }
          });
        }
      };
      var refillGaps = function refillGaps() {
        if (!state.scroll) {
          fillGaps();
        }
      };
      var scroll_lock_hideLockableOverflow = function hideLockableOverflow() {
        var selector = arrayAsSelector(state.lockableSelectors);
        scroll_lock_hideLockableOverflowSelector(selector);
      };
      var scroll_lock_showLockableOverflow = function showLockableOverflow() {
        var selector = arrayAsSelector(state.lockableSelectors);
        scroll_lock_showLockableOverflowSelector(selector);
      };
      var scroll_lock_hideLockableOverflowSelector = function hideLockableOverflowSelector(selector) {
        var $targets = document.querySelectorAll(selector);
        eachNode($targets, function ($target) {
          scroll_lock_hideLockableOverflowTarget($target);
        });
      };
      var scroll_lock_showLockableOverflowSelector = function showLockableOverflowSelector(selector) {
        var $targets = document.querySelectorAll(selector);
        eachNode($targets, function ($target) {
          scroll_lock_showLockableOverflowTarget($target);
        });
      };
      var scroll_lock_hideLockableOverflowTarget = function hideLockableOverflowTarget($target) {
        if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') !== 'true') {
          var computedStyle = window.getComputedStyle($target);
          $target.setAttribute('data-scroll-lock-saved-overflow-y-property', computedStyle.overflowY);
          $target.setAttribute('data-scroll-lock-saved-inline-overflow-property', $target.style.overflow);
          $target.setAttribute('data-scroll-lock-saved-inline-overflow-y-property', $target.style.overflowY);
          $target.style.overflow = 'hidden';
          $target.setAttribute('data-scroll-lock-locked', 'true');
        }
      };
      var scroll_lock_showLockableOverflowTarget = function showLockableOverflowTarget($target) {
        if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') === 'true') {
          $target.style.overflow = $target.getAttribute('data-scroll-lock-saved-inline-overflow-property');
          $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-inline-overflow-y-property');
          $target.removeAttribute('data-scroll-lock-saved-overflow-property');
          $target.removeAttribute('data-scroll-lock-saved-inline-overflow-property');
          $target.removeAttribute('data-scroll-lock-saved-inline-overflow-y-property');
          $target.removeAttribute('data-scroll-lock-locked');
        }
      };
      var fillGaps = function fillGaps() {
        state.fillGapSelectors.map(function (selector) {
          scroll_lock_fillGapSelector(selector);
        });
      };
      var unfillGaps = function unfillGaps() {
        state.fillGapSelectors.map(function (selector) {
          scroll_lock_unfillGapSelector(selector);
        });
      };
      var scroll_lock_fillGapSelector = function fillGapSelector(selector) {
        var $targets = document.querySelectorAll(selector);
        var isLockable = state.lockableSelectors.indexOf(selector) !== -1;
        eachNode($targets, function ($target) {
          scroll_lock_fillGapTarget($target, isLockable);
        });
      };
      var scroll_lock_fillGapTarget = function fillGapTarget($target) {
        var isLockable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (isElement($target)) {
          var scrollBarWidth;
          if ($target.getAttribute('data-scroll-lock-lockable') === '' || isLockable) {
            scrollBarWidth = scroll_lock_getTargetScrollBarWidth($target, true);
          } else {
            var $lockableParent = findParentBySelector($target, arrayAsSelector(state.lockableSelectors));
            scrollBarWidth = scroll_lock_getTargetScrollBarWidth($lockableParent, true);
          }
          if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
            scroll_lock_unfillGapTarget($target);
          }
          var computedStyle = window.getComputedStyle($target);
          $target.setAttribute('data-scroll-lock-filled-gap', 'true');
          $target.setAttribute('data-scroll-lock-current-fill-gap-method', state.fillGapMethod);
          if (state.fillGapMethod === 'margin') {
            var currentMargin = parseFloat(computedStyle.marginRight);
            $target.style.marginRight = "".concat(currentMargin + scrollBarWidth, "px");
          } else if (state.fillGapMethod === 'width') {
            $target.style.width = "calc(100% - ".concat(scrollBarWidth, "px)");
          } else if (state.fillGapMethod === 'max-width') {
            $target.style.maxWidth = "calc(100% - ".concat(scrollBarWidth, "px)");
          } else if (state.fillGapMethod === 'padding') {
            var currentPadding = parseFloat(computedStyle.paddingRight);
            $target.style.paddingRight = "".concat(currentPadding + scrollBarWidth, "px");
          }
        }
      };
      var scroll_lock_unfillGapSelector = function unfillGapSelector(selector) {
        var $targets = document.querySelectorAll(selector);
        eachNode($targets, function ($target) {
          scroll_lock_unfillGapTarget($target);
        });
      };
      var scroll_lock_unfillGapTarget = function unfillGapTarget($target) {
        if (isElement($target)) {
          if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
            var currentFillGapMethod = $target.getAttribute('data-scroll-lock-current-fill-gap-method');
            $target.removeAttribute('data-scroll-lock-filled-gap');
            $target.removeAttribute('data-scroll-lock-current-fill-gap-method');
            if (currentFillGapMethod === 'margin') {
              $target.style.marginRight = "";
            } else if (currentFillGapMethod === 'width') {
              $target.style.width = "";
            } else if (currentFillGapMethod === 'max-width') {
              $target.style.maxWidth = "";
            } else if (currentFillGapMethod === 'padding') {
              $target.style.paddingRight = "";
            }
          }
        }
      };
      var onResize = function onResize(e) {
        refillGaps();
      };
      var onTouchStart = function onTouchStart(e) {
        if (!state.scroll) {
          state.startTouchY = e.touches[0].clientY;
          state.startTouchX = e.touches[0].clientX;
        }
      };
      var scroll_lock_onTouchMove = function onTouchMove(e) {
        if (!state.scroll) {
          var startTouchY = state.startTouchY,
            startTouchX = state.startTouchX;
          var currentClientY = e.touches[0].clientY;
          var currentClientX = e.touches[0].clientX;
          if (e.touches.length < 2) {
            var selector = arrayAsSelector(state.scrollableSelectors);
            var direction = {
              up: startTouchY < currentClientY,
              down: startTouchY > currentClientY,
              left: startTouchX < currentClientX,
              right: startTouchX > currentClientX
            };
            var directionWithOffset = {
              up: startTouchY + TOUCH_DIRECTION_DETECT_OFFSET < currentClientY,
              down: startTouchY - TOUCH_DIRECTION_DETECT_OFFSET > currentClientY,
              left: startTouchX + TOUCH_DIRECTION_DETECT_OFFSET < currentClientX,
              right: startTouchX - TOUCH_DIRECTION_DETECT_OFFSET > currentClientX
            };
            var handle = function handle($el) {
              var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              if ($el) {
                var parentScrollableEl = findParentBySelector($el, selector, false);
                if (elementIsInputRange($el)) {
                  return false;
                }
                if (skip || elementIsScrollableField($el) && findParentBySelector($el, selector) || elementHasSelector($el, selector)) {
                  var prevent = false;
                  if (elementScrollLeftOnStart($el) && elementScrollLeftOnEnd($el)) {
                    if (direction.up && elementScrollTopOnStart($el) || direction.down && elementScrollTopOnEnd($el)) {
                      prevent = true;
                    }
                  } else if (elementScrollTopOnStart($el) && elementScrollTopOnEnd($el)) {
                    if (direction.left && elementScrollLeftOnStart($el) || direction.right && elementScrollLeftOnEnd($el)) {
                      prevent = true;
                    }
                  } else if (directionWithOffset.up && elementScrollTopOnStart($el) || directionWithOffset.down && elementScrollTopOnEnd($el) || directionWithOffset.left && elementScrollLeftOnStart($el) || directionWithOffset.right && elementScrollLeftOnEnd($el)) {
                    prevent = true;
                  }
                  if (prevent) {
                    if (parentScrollableEl) {
                      handle(parentScrollableEl, true);
                    } else {
                      if (e.cancelable) {
                        e.preventDefault();
                      }
                    }
                  }
                } else {
                  handle(parentScrollableEl);
                }
              } else {
                if (e.cancelable) {
                  e.preventDefault();
                }
              }
            };
            handle(e.target);
          }
        }
      };
      var onTouchEnd = function onTouchEnd(e) {
        if (!state.scroll) {
          state.startTouchY = 0;
          state.startTouchX = 0;
        }
      };
      if (typeof window !== 'undefined') {
        window.addEventListener('resize', onResize);
      }
      if (typeof document !== 'undefined') {
        document.addEventListener('touchstart', onTouchStart);
        document.addEventListener('touchmove', scroll_lock_onTouchMove, {
          passive: false
        });
        document.addEventListener('touchend', onTouchEnd);
      }
      var deprecatedMethods = {
        hide: function hide(target) {
          throwError('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget');
          disablePageScroll(target);
        },
        show: function show(target) {
          throwError('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget');
          enablePageScroll(target);
        },
        toggle: function toggle(target) {
          throwError('"toggle" is deprecated! Do not use it.');
          if (getScrollState()) {
            disablePageScroll();
          } else {
            enablePageScroll(target);
          }
        },
        getState: function getState() {
          throwError('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate');
          return getScrollState();
        },
        getWidth: function getWidth() {
          throwError('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth');
          return getPageScrollBarWidth();
        },
        getCurrentWidth: function getCurrentWidth() {
          throwError('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth');
          return getCurrentPageScrollBarWidth();
        },
        setScrollableTargets: function setScrollableTargets(target) {
          throwError('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget');
          scroll_lock_addScrollableTarget(target);
        },
        setFillGapSelectors: function setFillGapSelectors(selector) {
          throwError('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector');
          scroll_lock_addFillGapSelector(selector);
        },
        setFillGapTargets: function setFillGapTargets(target) {
          throwError('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget');
          scroll_lock_addFillGapTarget(target);
        },
        clearQueue: function clearQueue() {
          throwError('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks');
          clearQueueScrollLocks();
        }
      };
      var scrollLock = _objectSpread({
        disablePageScroll: disablePageScroll,
        enablePageScroll: enablePageScroll,
        getScrollState: getScrollState,
        clearQueueScrollLocks: clearQueueScrollLocks,
        getTargetScrollBarWidth: scroll_lock_getTargetScrollBarWidth,
        getCurrentTargetScrollBarWidth: scroll_lock_getCurrentTargetScrollBarWidth,
        getPageScrollBarWidth: getPageScrollBarWidth,
        getCurrentPageScrollBarWidth: getCurrentPageScrollBarWidth,
        addScrollableSelector: scroll_lock_addScrollableSelector,
        removeScrollableSelector: scroll_lock_removeScrollableSelector,
        addScrollableTarget: scroll_lock_addScrollableTarget,
        removeScrollableTarget: scroll_lock_removeScrollableTarget,
        addLockableSelector: scroll_lock_addLockableSelector,
        addLockableTarget: scroll_lock_addLockableTarget,
        addFillGapSelector: scroll_lock_addFillGapSelector,
        removeFillGapSelector: scroll_lock_removeFillGapSelector,
        addFillGapTarget: scroll_lock_addFillGapTarget,
        removeFillGapTarget: scroll_lock_removeFillGapTarget,
        setFillGapMethod: scroll_lock_setFillGapMethod,
        refillGaps: refillGaps,
        _state: state
      }, deprecatedMethods);

      /* harmony default export */
      var scroll_lock = __webpack_exports__["default"] = scrollLock;

      /***/
    }
    /******/])["default"]
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/module.js */ "../node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./js/modules/input-file/create-message-markup.js":
/*!********************************************************!*\
  !*** ./js/modules/input-file/create-message-markup.js ***!
  \********************************************************/
/*! exports provided: createMessageMarkup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMessageMarkup", function() { return createMessageMarkup; });
var createMessageMarkup = function createMessageMarkup(message) {
  return "<div class=\"input-upload__message\">".concat(message, "</div>");
};

/***/ }),

/***/ "./js/modules/input-file/create-preview-container-markup.js":
/*!******************************************************************!*\
  !*** ./js/modules/input-file/create-preview-container-markup.js ***!
  \******************************************************************/
/*! exports provided: createPreviewContainerMarkup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPreviewContainerMarkup", function() { return createPreviewContainerMarkup; });
var createPreviewContainerMarkup = function createPreviewContainerMarkup() {
  return '<div class="input-upload__preview"></div>';
};

/***/ }),

/***/ "./js/modules/input-file/create-preview-markup.js":
/*!********************************************************!*\
  !*** ./js/modules/input-file/create-preview-markup.js ***!
  \********************************************************/
/*! exports provided: createPreviewMarkup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPreviewMarkup", function() { return createPreviewMarkup; });
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper */ "./js/modules/input-file/helper.js");

var createPreviewMarkup = function createPreviewMarkup(file, event, options, error) {
  var nameArray = file.name.split('.');
  var expansion = nameArray[nameArray.length - 1];
  var hasErrorClass = error ? ' is-invalid' : '';
  return "<div class=\"input-upload__preview-item".concat(hasErrorClass, "\">\n            <button class=\"input-upload__preview-item-remove\" type=\"button\" data-file-name=\"").concat(file.name, "\">&times;</button>\n            ").concat(options.previewImg ? "<img class=\"input-upload__preview-img\" src=\"".concat(event.target.result, "\" alt=\"").concat(file.name, "\" />") : '', "\n            ").concat(options.iconFormat ? "<img class=\"input-upload__preview-icon\" src=\"".concat(options.iconFormat[expansion] ? options.iconFormat[expansion] : options.iconFormat.default, "\" alt=\"\" />") : '', "\n            ").concat(options.fileInfo ? "<div class=\"input-upload__preview-file-info\"\" />\n              ".concat(options.fileInfo.fileName ? "<span class=\"input-upload__preview-file-name\"\" />\n                ".concat(file.name, "\n              </span>") : '', "\n              ").concat(options.fileInfo.fileSize ? "<span class=\"input-upload__preview-file-size\"\" />\n                ".concat(Object(_helper__WEBPACK_IMPORTED_MODULE_0__["bytesToSize"])(file.size), "\n              </span>") : '', "\n            </div>") : '', "\n          </div>");
};

/***/ }),

/***/ "./js/modules/input-file/helper.js":
/*!*****************************************!*\
  !*** ./js/modules/input-file/helper.js ***!
  \*****************************************/
/*! exports provided: bytesToSize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesToSize", function() { return bytesToSize; });
var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
var bytesToSize = function bytesToSize(bytes) {
  if (!bytes) {
    return '0 Byte';
  }
  var index = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);
  return "".concat(Math.round(bytes / Math.pow(1024, index)), " ").concat(sizes[index]);
};

/***/ }),

/***/ "./js/modules/input-file/init-upload.js":
/*!**********************************************!*\
  !*** ./js/modules/input-file/init-upload.js ***!
  \**********************************************/
/*! exports provided: uploadFile, uploadImageDrop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uploadFile", function() { return uploadFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uploadImageDrop", function() { return uploadImageDrop; });
/* harmony import */ var _upload_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./upload.js */ "./js/modules/input-file/upload.js");

var uploadFileBlock = document.querySelector('[data-upload="file"]');
var uploadImageDropBlock = document.querySelector('[data-upload="img-drop"]');
var uploadFile = function uploadFile() {
  return new _upload_js__WEBPACK_IMPORTED_MODULE_0__["Upload"](uploadFileBlock, {
    uploadLength: 5,
    preview: true,
    maxFullSize: 1048576,
    accept: ['.pdf', '.docx', '.xlsx'],
    iconFormat: {
      xlsx: './img/file/icon-file-xlsx.png',
      docx: './img/file/icon-file-docx.png',
      pdf: './img/file/icon-file-pdf.png',
      default: './img/file/icon-file-docx.png'
    },
    fileInfo: {
      fileName: true,
      fileSize: true
    },
    successMessage: 'Файлы добавлены',
    emptyMessage: 'Добавление файла обязательно',
    errorMessage: 'Общий размер файлов слишком большой'
  });
};
var uploadImageDrop = function uploadImageDrop() {
  return new _upload_js__WEBPACK_IMPORTED_MODULE_0__["Upload"](uploadImageDropBlock, {
    uploadLength: 4,
    dropZone: true,
    previewImg: true,
    maxFileSize: 1048576,
    accept: ['.png', '.jpg', '.jpeg', '.webp'],
    iconFormat: {
      png: './img/file/icon-file-png.png',
      jpg: './img/file/icon-file-jpg.png',
      jpeg: './img/file/icon-file-jpg.png',
      webp: './img/file/icon-file-webp.png',
      default: './img/file/icon-file-docs.png'
    },
    fileInfo: {
      fileName: true,
      fileSize: true
    },
    successMessage: 'Файлы добавлены',
    emptyMessage: 'Добавление файла обязательно',
    errorMessage: 'Выделенные файлы превышают максимальный размер'
  });
};

/***/ }),

/***/ "./js/modules/input-file/render.js":
/*!*****************************************!*\
  !*** ./js/modules/input-file/render.js ***!
  \*****************************************/
/*! exports provided: createElement, renderElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderElement", function() { return renderElement; });
var createElement = function createElement(template) {
  var newElement = document.createElement('div');
  newElement.innerHTML = template;
  return newElement.firstChild;
};
var renderElement = function renderElement(container, component) {
  var place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'beforeend';
  switch (place) {
    case 'beforebegin':
      container.before(component);
      break;
    case 'afterbegin':
      container.prepend(component);
      break;
    case 'beforeend':
      container.append(component);
      break;
    case 'afterend':
      container.after(component);
      break;
  }
};

/***/ }),

/***/ "./js/modules/input-file/upload.js":
/*!*****************************************!*\
  !*** ./js/modules/input-file/upload.js ***!
  \*****************************************/
/*! exports provided: Upload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Upload", function() { return Upload; });
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render */ "./js/modules/input-file/render.js");
/* harmony import */ var _create_preview_container_markup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create-preview-container-markup */ "./js/modules/input-file/create-preview-container-markup.js");
/* harmony import */ var _create_message_markup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./create-message-markup */ "./js/modules/input-file/create-message-markup.js");
/* harmony import */ var _create_preview_markup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./create-preview-markup */ "./js/modules/input-file/create-preview-markup.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var Upload = /*#__PURE__*/function () {
  function Upload(uploadBlock) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Upload);
    this._uploadBlock = uploadBlock;
    if (!this._uploadBlock) {
      return;
    }
    this._options = options;
    this._formParent = this._uploadBlock.closest('form');
    this._maxFileSize = this._options.maxFileSize ? this._options.maxFileSize : false;
    this._maxFullSize = this._options.maxFullSize ? this._options.maxFullSize : false;
    this._dropZone = this._options.dropZone ? this._options.dropZone : false;
    this._renderPreview = this._options.preview ? this._options.preview : false;
    this._uploadLength = this._options.uploadLength ? this._options.uploadLength : 1;
    this._accept = this._options.accept ? this._options.accept : false;
    this._emptyMessage = this._options.emptyMessage ? this._options.emptyMessage : false;
    this._errorMessage = this._options.errorMessage ? this._options.errorMessage : false;
    this._successMessage = this._options.successMessage ? this._options.successMessage : false;
    this._input = this._uploadBlock.querySelector('input');
    this._dropZoneBlock = this._dropZone ? this._uploadBlock.querySelector('[data-drop-zone]') : false;
    this._previewBlock = null;
    this._files = [];
    this._message = null;
    this._onDropZoneBlockDragover = this._onDropZoneBlockDragover.bind(this);
    this._onDropZoneBlockDragenter = this._onDropZoneBlockDragenter.bind(this);
    this._onDropZoneBlockDragleave = this._onDropZoneBlockDragleave.bind(this);
    this._onDropZoneBlockDrop = this._onDropZoneBlockDrop.bind(this);
    this._onDropZoneBlockClick = this._onDropZoneBlockClick.bind(this);
    this._onInputChange = this._onInputChange.bind(this);
    this._onPreviewBlockClick = this._onPreviewBlockClick.bind(this);
    this._onFormParentReset = this._onFormParentReset.bind(this);
    this._onFormParentSubmit = this._onFormParentSubmit.bind(this);
    this._init();
  }
  _createClass(Upload, [{
    key: "_overwriteFileList",
    value: function _overwriteFileList() {
      var dataTransfer = new DataTransfer();
      this._files.forEach(function (file) {
        return dataTransfer.items.add(file);
      });
      this._input.files = dataTransfer.files;
    }
  }, {
    key: "_changeDropZoneBlock",
    value: function _changeDropZoneBlock() {
      if (this._files.length) {
        this._dropZoneBlock.classList.add('not-empty');
        return;
      }
      this._dropZoneBlock.classList.remove('not-empty');
    }
  }, {
    key: "_checkAccept",
    value: function _checkAccept(file) {
      var flag = false;
      this._accept.forEach(function (item) {
        if (file.name.endsWith(item)) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_renderMessage",
    value: function _renderMessage(message) {
      if (this._message) {
        this._message.remove();
      }
      this._message = Object(_render__WEBPACK_IMPORTED_MODULE_0__["createElement"])(Object(_create_message_markup__WEBPACK_IMPORTED_MODULE_2__["createMessageMarkup"])(message));
      Object(_render__WEBPACK_IMPORTED_MODULE_0__["renderElement"])(this._uploadBlock, this._message);
    }
  }, {
    key: "_renderFiles",
    value: function _renderFiles() {
      var _this = this;
      var error = false;
      if (this._accept) {
        this._files = this._files.filter(function (file) {
          return _this._checkAccept(file);
        });
      }
      this._overwriteFileList();
      error = this._maxFullSize ? this._checkFullSize(this._files) > this._maxFullSize : false;
      if (this._previewBlock) {
        this._previewBlock.innerHTML = '';
      }
      if (this._dropZoneBlock) {
        this._changeDropZoneBlock();
      }
      this._files.forEach(function (file) {
        var fileSizeError = _this._maxFileSize ? file.size > _this._maxFileSize : false;
        if (fileSizeError) {
          error = true;
        }
        var reader = new FileReader();
        if (_this._previewBlock) {
          reader.addEventListener('load', function (readerEvent) {
            Object(_render__WEBPACK_IMPORTED_MODULE_0__["renderElement"])(_this._previewBlock, Object(_render__WEBPACK_IMPORTED_MODULE_0__["createElement"])(Object(_create_preview_markup__WEBPACK_IMPORTED_MODULE_3__["createPreviewMarkup"])(file, readerEvent, _this._options, fileSizeError)));
          });
        }
        reader.readAsDataURL(file);
      });
      if (error) {
        this._uploadBlock.classList.add('is-invalid');
        if (this._errorMessage) {
          this._renderMessage(this._errorMessage);
        }
      } else {
        this._uploadBlock.classList.remove('is-invalid');
        if (this._message) {
          this._message.remove();
          this._message = null;
        }
      }
    }
  }, {
    key: "_checkFullSize",
    value: function _checkFullSize(array) {
      var fullSize = 0;
      array.forEach(function (item) {
        fullSize += item.size;
      });
      return fullSize;
    }
  }, {
    key: "reset",
    value: function reset() {
      this._uploadBlock.classList.remove('is-invalid');
      this._uploadBlock.classList.remove('is-valid');
      if (this._dropZoneBlock) {
        this._dropZoneBlock.classList.remove('not-empty');
      }
      this._uploadBlock.querySelectorAll('.is-invalid').forEach(function (item) {
        return item.classList.remove('is-invalid');
      });
      this._uploadBlock.querySelectorAll('.is-valid').forEach(function (item) {
        return item.classList.remove('is-valid');
      });
      this._files = [];
      if (this._previewBlock) {
        this._previewBlock.innerHTML = '';
      }
      if (this._message) {
        this._message.remove();
        this._message = null;
      }
    }
  }, {
    key: "_onFormParentReset",
    value: function _onFormParentReset() {
      this.reset();
    }
  }, {
    key: "_onFormParentSubmit",
    value: function _onFormParentSubmit() {
      if (!this._files.length && this._emptyMessage) {
        this._renderMessage(this._emptyMessage);
      }
    }
  }, {
    key: "_onPreviewBlockClick",
    value: function _onPreviewBlockClick(event) {
      if (!event.target.dataset.fileName) {
        return;
      }
      var name = event.target.dataset.fileName;
      this._files = this._files.filter(function (file) {
        return file.name !== name;
      });
      this._overwriteFileList();
      this._previewBlock.querySelector("[data-file-name=\"".concat(name, "\"]")).parentElement.remove();
      if (this._dropZoneBlock) {
        this._changeDropZoneBlock();
      }
      var fullSizeError = this._maxFullSize ? this._checkFullSize(this._files) > this._maxFullSize : false;
      if (fullSizeError) {
        this._uploadBlock.classList.add('is-invalid');
        if (this._errorMessage) {
          this._renderMessage(this._errorMessage);
        }
      } else {
        this._uploadBlock.classList.remove('is-invalid');
        if (this._message) {
          this._message.remove();
          this._message = null;
        }
      }
    }
  }, {
    key: "_onDropZoneBlockClick",
    value: function _onDropZoneBlockClick(event) {
      if (event.target.dataset.fileName || event.target.closest('.input-upload__preview')) {
        return;
      }
      this._input.click();
    }
  }, {
    key: "_onDropZoneBlockDragover",
    value: function _onDropZoneBlockDragover(event) {
      event.preventDefault();
      if (this._dropZoneBlock.classList.contains('is-drag')) {
        return;
      }
      this._dropZoneBlock.classList.add('is-drag');
    }
  }, {
    key: "_onDropZoneBlockDragenter",
    value: function _onDropZoneBlockDragenter(event) {
      event.preventDefault();
      if (!this._dropZoneBlock.classList.contains('is-drag')) {
        return;
      }
      this._dropZoneBlock.classList.remove('is-drag');
    }
  }, {
    key: "_onDropZoneBlockDragleave",
    value: function _onDropZoneBlockDragleave(event) {
      event.preventDefault();
      if (!this._dropZoneBlock.classList.contains('is-drag')) {
        return;
      }
      this._dropZoneBlock.classList.remove('is-drag');
    }
  }, {
    key: "_onDropZoneBlockDrop",
    value: function _onDropZoneBlockDrop(event) {
      event.preventDefault();
      this._dropZoneBlock.classList.remove('is-drag');
      if (!event.dataTransfer.files.length) {
        return;
      }
      this._files = [].concat(_toConsumableArray(this._files), _toConsumableArray(event.dataTransfer.files)).slice(0, this._uploadLength);
      this._renderFiles();
    }
  }, {
    key: "_onInputChange",
    value: function _onInputChange(event) {
      if (!event.target.files.length) {
        return;
      }
      this._files = [].concat(_toConsumableArray(this._files), _toConsumableArray(event.target.files)).slice(0, this._uploadLength);
      this._renderFiles();
    }
  }, {
    key: "_init",
    value: function _init() {
      this._input.addEventListener('change', this._onInputChange);
      if (this._uploadLength > 1) {
        this._input.setAttribute('multiple', '');
      }
      if (this._accept) {
        this._input.setAttribute('accept', this._accept);
      }
      if (this._dropZoneBlock) {
        this._previewBlock = Object(_render__WEBPACK_IMPORTED_MODULE_0__["createElement"])(Object(_create_preview_container_markup__WEBPACK_IMPORTED_MODULE_1__["createPreviewContainerMarkup"])(this._options));
        this._previewBlock.addEventListener('click', this._onPreviewBlockClick);
        this._dropZoneBlock.addEventListener('dragover', this._onDropZoneBlockDragover);
        this._dropZoneBlock.addEventListener('dragenter', this._onDropZoneBlockDragenter);
        this._dropZoneBlock.addEventListener('dragleave', this._onDropZoneBlockDragleave);
        this._dropZoneBlock.addEventListener('drop', this._onDropZoneBlockDrop);
        this._dropZoneBlock.addEventListener('click', this._onDropZoneBlockClick);
        Object(_render__WEBPACK_IMPORTED_MODULE_0__["renderElement"])(this._dropZoneBlock, this._previewBlock);
      }
      if (this._renderPreview) {
        this._previewBlock = Object(_render__WEBPACK_IMPORTED_MODULE_0__["createElement"])(Object(_create_preview_container_markup__WEBPACK_IMPORTED_MODULE_1__["createPreviewContainerMarkup"])(this._options));
        this._previewBlock.addEventListener('click', this._onPreviewBlockClick);
        Object(_render__WEBPACK_IMPORTED_MODULE_0__["renderElement"])(this._uploadBlock, this._previewBlock);
      }
      if (this._formParent) {
        this._formParent.addEventListener('reset', this._onFormParentReset);
        this._formParent.addEventListener('submit', this._onFormParentSubmit);
      }
    }
  }]);
  return Upload;
}();

/***/ }),

/***/ "./js/modules/modals/init-modals.js":
/*!******************************************!*\
  !*** ./js/modules/modals/init-modals.js ***!
  \******************************************/
/*! exports provided: modals, initModals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modals", function() { return modals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initModals", function() { return initModals; });
/* harmony import */ var _modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals */ "./js/modules/modals/modals.js");

var modals;

// Здесь реализован пример открытия модалки через колбэк закрытия
// const openModalInCloseCallback = (name, context = this) => {
//   context._enableScrolling = false;
//   context._setSettings('default');
//   modals.open(name);
// };

// closeCallback() {
//   openModalInCloseCallback('modal-5');
// },

var settings = {
  'default': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: false
  }
};
var initModals = function initModals() {
  var modalElements = document.querySelectorAll('.modal');
  if (modalElements.length) {
    modalElements.forEach(function (el) {
      setTimeout(function () {
        el.classList.remove('modal--preload');
      }, 100);
    });
  }
  modals = new _modals__WEBPACK_IMPORTED_MODULE_0__["Modals"](settings);
  // Используйте в разработке экспортируемую переменную modals, window сделан для бэкэнда
  window.modals = modals;
};


/***/ }),

/***/ "./js/modules/modals/modals.js":
/*!*************************************!*\
  !*** ./js/modules/modals/modals.js ***!
  \*************************************/
/*! exports provided: Modals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modals", function() { return Modals; });
/* harmony import */ var _vendor_scroll_lock_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/scroll-lock.min */ "./js/vendor/scroll-lock.min.js");
/* harmony import */ var _vendor_scroll_lock_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vendor_scroll_lock_min__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/focus-lock */ "./js/utils/focus-lock.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Modals = /*#__PURE__*/function () {
  function Modals() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Modals);
    this._scrollLock = _vendor_scroll_lock_min__WEBPACK_IMPORTED_MODULE_0___default.a;
    this._focusLock = new _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._modalOpenElements = document.querySelectorAll('[data-open-modal]');
    this._stackModalElements = [];
    this._openedModalElement = null;
    this._modalName = null;
    this._enableScrolling = true;
    this._settingKey = 'default';
    this._settings = settings;
    this._preventDefault = this._settings[this._settingKey].preventDefault;
    this._stopPlay = this._settings[this._settingKey].stopPlay;
    this._lockFocus = this._settings[this._settingKey].lockFocus;
    this._startFocus = this._settings[this._settingKey].startFocus;
    this._focusBack = this._settings[this._settingKey].focusBack;
    this._eventTimeout = this._settings[this._settingKey].eventTimeout;
    this._resetScrollPos = this._settings[this._settingKey].resetScrollPos;
    this._openCallback = this._settings[this._settingKey].openCallback;
    this._closeCallback = this._settings[this._settingKey].closeCallback;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._modalClickHandler = this._modalClickHandler.bind(this);
    this._init();
  }
  _createClass(Modals, [{
    key: "_init",
    value: function _init() {
      if (this._modalOpenElements.length) {
        document.addEventListener('click', this._documentClickHandler);
      }
    }
  }, {
    key: "_setSettings",
    value: function _setSettings() {
      var settingKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._settingKey;
      if (!this._settings[settingKey]) {
        return;
      }
      this._preventDefault = typeof this._settings[settingKey].preventDefault === 'boolean' ? this._settings[settingKey].preventDefault : this._settings[this._settingKey].preventDefault;
      this._stopPlay = typeof this._settings[settingKey].stopPlay === 'boolean' ? this._settings[settingKey].stopPlay : this._settings[this._settingKey].stopPlay;
      this._lockFocus = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].lockFocus : this._settings[this._settingKey].lockFocus;
      this._startFocus = typeof this._settings[settingKey].startFocus === 'boolean' ? this._settings[settingKey].startFocus : this._settings[this._settingKey].startFocus;
      this._focusBack = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].focusBack : this._settings[this._settingKey].focusBack;
      this._resetScrollPos = typeof this._settings[settingKey].resetScrollPos === 'boolean' ? this._settings[settingKey].resetScrollPos : this._settings[this._settingKey].resetScrollPos;
      this._eventTimeout = typeof this._settings[settingKey].eventTimeout === 'number' ? this._settings[settingKey].eventTimeout : this._settings[this._settingKey].eventTimeout;
      this._openCallback = this._settings[settingKey].openCallback || this._settings[this._settingKey].openCallback;
      this._closeCallback = this._settings[settingKey].closeCallback || this._settings[this._settingKey].closeCallback;
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-open-modal]')) {
        return;
      }
      evt.preventDefault();
      this._modalName = target.closest('[data-open-modal]').dataset.openModal;
      if (!this._modalName) {
        return;
      }
      this.open();
    }
  }, {
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var isEscKey = evt.key === 'Escape' || evt.key === 'Esc';
      if (isEscKey) {
        evt.preventDefault();
        this.close(document.querySelector('.modal.is-active').dataset.modal);
      }
    }
  }, {
    key: "_modalClickHandler",
    value: function _modalClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-close-modal]')) {
        return;
      }
      if (target.closest('[data-close-modal="back"]')) {
        this.back();
      } else {
        this.close(target.closest('[data-modal]').dataset.modal);
        this._stackModalElements = [];
      }
    }
  }, {
    key: "_addListeners",
    value: function _addListeners(modal) {
      modal.addEventListener('click', this._modalClickHandler);
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_removeListeners",
    value: function _removeListeners(modal) {
      modal.removeEventListener('click', this._modalClickHandler);
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_stopInteractive",
    value: function _stopInteractive(modal) {
      if (this._stopPlay) {
        modal.querySelectorAll('video, audio').forEach(function (el) {
          return el.pause();
        });
        modal.querySelectorAll('[data-iframe]').forEach(function (el) {
          el.querySelector('iframe').contentWindow.postMessage('{"event": "command", "func": "pauseVideo", "args": ""}', '*');
        });
      }
    }
  }, {
    key: "_autoPlay",
    value: function _autoPlay(modal) {
      modal.querySelectorAll('[data-iframe]').forEach(function (el) {
        var autoPlay = el.closest('[data-auto-play]');
        if (autoPlay) {
          el.querySelector('iframe').contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      if (!modal || modal.classList.contains('is-active')) {
        return;
      }
      document.removeEventListener('click', this._documentClickHandler);
      this._openedModalElement = document.querySelector('.modal.is-active');
      if (this._openedModalElement) {
        this._scrollLock.enablePageScroll(this._openedModalElement);
        this._scrollLock.disablePageScroll(modal);
        this._enableScrolling = false;
        this.close(this._openedModalElement.dataset.modal);
      }
      this._setSettings(modalName);
      modal.classList.add('is-active');
      if (modalName !== this._stackModalElements[this._stackModalElements.length - 1]) {
        this._stackModalElements.push(modalName);
      }
      if (!this._openedModalElement) {
        this._scrollLock.disablePageScroll(modal);
      }
      if (this._openCallback) {
        this._openCallback();
      }
      if (this._lockFocus) {
        this._focusLock.lock('.modal.is-active', this._startFocus);
      }
      if (this._resetScrollPos) {
        modal.scrollTo(0, 0);
      }
      setTimeout(function () {
        _this._addListeners(modal);
        _this._autoPlay(modal);
        document.addEventListener('click', _this._documentClickHandler);
      }, this._eventTimeout);
    }
  }, {
    key: "back",
    value: function back() {
      if (!this._stackModalElements.length) {
        return;
      }
      var activeModal = this._stackModalElements[this._stackModalElements.length - 1];
      var prevModal = this._stackModalElements[this._stackModalElements.length - 2];
      if (this._stackModalElements.length === 1) {
        this._stackModalElements = [];
      }
      if (prevModal) {
        this._stackModalElements.pop();
        this.open(prevModal);
      }
      this.close(activeModal);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      document.removeEventListener('click', this._documentClickHandler);
      if (!modal || !modal.classList.contains('is-active')) {
        return;
      }
      if (this._lockFocus) {
        this._focusLock.unlock(this._focusBack);
      }
      modal.classList.remove('is-active');
      this._removeListeners(modal);
      this._stopInteractive(modal);
      if (this._closeCallback) {
        this._closeCallback();
      }
      if (this._enableScrolling) {
        setTimeout(function () {
          _this2._scrollLock.enablePageScroll(modal);
        }, this._eventTimeout);
      }
      setTimeout(function () {
        document.addEventListener('click', _this2._documentClickHandler);
      }, this._eventTimeout);
      this._setSettings('default');
      this._enableScrolling = true;
    }
  }]);
  return Modals;
}();

/***/ }),

/***/ "./js/modules/parallax.js":
/*!********************************!*\
  !*** ./js/modules/parallax.js ***!
  \********************************/
/*! exports provided: parallax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parallax", function() { return parallax; });
var wrappers = document.querySelectorAll('[data-parallax-wrapper]');
var items = document.querySelectorAll('[data-parallax-item]');
var parallax = function parallax() {
  document.addEventListener('mousemove', function (e) {
    for (var i = 0; i < wrappers.length; i++) {
      var wrapper = wrappers[i];
      var item = items[i];
      var wrapperRect = wrapper.getBoundingClientRect();
      if (e.clientX >= wrapperRect.left && e.clientX <= wrapperRect.right && e.clientY >= wrapperRect.top && e.clientY <= wrapperRect.bottom) {
        var x = (e.clientX - wrapperRect.left) / wrapperRect.width;
        var y = (e.clientY - wrapperRect.top) / wrapperRect.height;
        item.style.transform = 'translate(-' + x * 50 + 'px, -' + y * 50 + 'px)';
      } else {
        item.style.transform = 'none';
      }
    }
  });
};

/***/ }),

/***/ "./js/modules/select/create-select-markup.js":
/*!***************************************************!*\
  !*** ./js/modules/select/create-select-markup.js ***!
  \***************************************************/
/*! exports provided: createNativeSelectMarkup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNativeSelectMarkup", function() { return createNativeSelectMarkup; });
var createNativeOptionsMarkup = function createNativeOptionsMarkup(items, activeIndex) {
  return items.map(function (el, index) {
    if (activeIndex.length) {
      var currentIndex = activeIndex.find(function (item) {
        return item === index;
      });
      if (currentIndex === index) {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', " selected>").concat(el.text ? "".concat(el.text) : '', "</option>");
      } else {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
      }
    } else {
      return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
    }
  }).join('\n');
};
var createNativeSelectMarkup = function createNativeSelectMarkup(_ref) {
  var id = _ref.id,
    items = _ref.items,
    multiple = _ref.multiple,
    name = _ref.name,
    required = _ref.required,
    _ref$activeIndex = _ref.activeIndex,
    activeIndex = _ref$activeIndex === void 0 ? [] : _ref$activeIndex;
  return "<select ".concat(id ? "id='".concat(id, "'") : '', " ").concat(name ? "name='".concat(name, "'") : '', " ").concat(multiple ? 'multiple' : '', " ").concat(required ? 'required' : '', " tabindex=\"-1\" aria-hidden=\"true\">\n            <option value=\"\"></option>\n            ").concat(createNativeOptionsMarkup(items, activeIndex), "\n          </select>");
};

/***/ }),

/***/ "./js/modules/select/custom-select.js":
/*!********************************************!*\
  !*** ./js/modules/select/custom-select.js ***!
  \********************************************/
/*! exports provided: CustomSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomSelect", function() { return CustomSelect; });
/* harmony import */ var _utils_render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/render */ "./js/utils/render.js");
/* harmony import */ var _create_select_markup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create-select-markup */ "./js/modules/select/create-select-markup.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var CustomSelect = /*#__PURE__*/function () {
  function CustomSelect() {
    _classCallCheck(this, CustomSelect);
    this._selects = null;
    this._selectElement = null;
    this._activeIndex = null;
    this._onDocumentClick = this._onDocumentClick.bind(this);
    this._onEscapePress = this._onEscapePress.bind(this);
    this._onSelectItemClick = this._onSelectItemClick.bind(this);
    this._onSelectItemKeydown = this._onSelectItemKeydown.bind(this);
    this._onLastItemKeydown = this._onLastItemKeydown.bind(this);
    this._onSelectClick = this._onSelectClick.bind(this);
    this._onSelectKeydown = this._onSelectKeydown.bind(this);
    window.selectInit = this.init.bind(this);
  }
  _createClass(CustomSelect, [{
    key: "_createMultiString",
    value: function _createMultiString(arr) {
      var str = '';
      if (arr.length) {
        if (arr.length === 1) {
          str = arr[0].innerHTML;
        } else {
          arr.forEach(function (element, index) {
            if (index === arr.length - 1) {
              str += element.innerHTML;
            } else {
              str += "".concat(element.innerHTML, ", ");
            }
          });
        }
      }
      return str;
    }
  }, {
    key: "_setSelectActiveState",
    value: function _setSelectActiveState(multiple, insert, item) {
      var buttonTextBlock = item.querySelector('.custom-select__text');
      var activeItems = item.querySelectorAll('.custom-select__item[aria-selected="true"]');
      var label = item.querySelector('.custom-select__label');
      var str = this._createMultiString(activeItems);
      buttonTextBlock.style.transition = '0s';
      if (label) {
        label.style.transition = '0s';
      }
      setTimeout(function () {
        if (label) {
          label.style.transition = null;
        }
        buttonTextBlock.style.transition = null;
      }, 300);
      if (multiple && insert) {
        item.classList.add('not-empty');
        buttonTextBlock.innerHTML = str;
      } else if (multiple) {
        return;
      } else {
        item.classList.add('not-empty');
        buttonTextBlock.innerHTML = activeItems[0].innerHTML;
      }
    }
  }, {
    key: "_closeSelect",
    value: function _closeSelect() {
      var activeSelect = document.querySelector('[data-select].is-open');
      document.removeEventListener('click', this._onDocumentClick);
      document.removeEventListener('keydown', this._onEscapePress);
      if (activeSelect) {
        activeSelect.classList.remove('is-open');
      }
    }
  }, {
    key: "_onSelectElementClickAction",
    value: function _onSelectElementClickAction(element, index) {
      var parent = element.closest('.custom-select');
      var multiple = parent.dataset.multiple;
      var insert = parent.dataset.insert;
      var buttonTextBlock = parent.querySelector('.custom-select__text');
      var itemText = element.textContent;
      var options = parent.querySelectorAll('option');
      var select = parent.querySelector('select');
      var changeEv = new CustomEvent('change');
      var inputEv = new CustomEvent('input');
      var form = select.closest('form');
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
      if (form) {
        var formChangeEv = new CustomEvent('change');
        var formInputEv = new CustomEvent('input');
        form.dispatchEvent(formChangeEv);
        form.dispatchEvent(formInputEv);
      }
      if (multiple) {
        if (insert === 'true') {
          if (element.getAttribute('aria-selected') === 'true') {
            element.setAttribute('aria-selected', 'false');
            var activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');
            var str = this._createMultiString(activeItems);
            options[index + 1].selected = false;
            buttonTextBlock.innerText = str;
            if (!str) {
              parent.classList.remove('not-empty');
              parent.classList.remove('is-valid');
            }
          } else {
            element.setAttribute('aria-selected', 'true');
            var _activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');
            var _str = this._createMultiString(_activeItems);
            buttonTextBlock.innerText = _str;
            parent.classList.add('not-empty');
            parent.classList.add('is-valid');
            options[index + 1].selected = true;
          }
        } else {
          if (element.getAttribute('aria-selected') === 'true') {
            element.setAttribute('aria-selected', 'false');
            options[index + 1].selected = false;
          } else {
            element.setAttribute('aria-selected', 'true');
            options[index + 1].selected = true;
          }
        }
      } else {
        var activeItem = parent.querySelector('.custom-select__item[aria-selected="true"]');
        if (element.getAttribute('aria-selected') === 'true') {
          this._closeSelect();
        } else {
          if (activeItem) {
            activeItem.setAttribute('aria-selected', 'false');
            parent.classList.remove('not-empty');
            parent.classList.remove('is-valid');
          }
          buttonTextBlock.innerText = itemText;
          element.setAttribute('aria-selected', 'true');
          parent.classList.add('not-empty');
          parent.classList.add('is-valid');
          options[index + 1].selected = true;
          this._closeSelect();
        }
      }
      select.dispatchEvent(changeEv);
      select.dispatchEvent(inputEv);
    }
  }, {
    key: "_onDocumentClick",
    value: function _onDocumentClick(_ref) {
      var target = _ref.target;
      if (!target.closest('.custom-select')) {
        this._closeSelect();
      }
    }
  }, {
    key: "_onEscapePress",
    value: function _onEscapePress(evt) {
      var isEscape = evt.key === 'Escape';
      if (isEscape) {
        this._closeSelect();
      }
    }
  }, {
    key: "_onSelectItemClick",
    value: function _onSelectItemClick(element, index) {
      this._onSelectElementClickAction(element, index);
    }
  }, {
    key: "_onSelectItemKeydown",
    value: function _onSelectItemKeydown(evt, element, index) {
      var isEnter = evt.key === 'Enter';
      if (isEnter) {
        this._onSelectElementClickAction(element, index);
      }
    }
  }, {
    key: "_onLastItemKeydown",
    value: function _onLastItemKeydown(evt) {
      var isTab = evt.key === 'Tab';
      if (isTab) {
        this._closeSelect();
      }
    }
  }, {
    key: "_onSelectClick",
    value: function _onSelectClick(evt) {
      var parent = evt.target.closest('[data-select]');
      var activeSelect = document.querySelector('[data-select].is-open');
      parent.classList.remove('is-invalid');
      if (activeSelect && activeSelect === parent) {
        activeSelect.classList.remove('is-open');
        return;
      }
      if (activeSelect) {
        this._closeSelect();
      }
      document.addEventListener('click', this._onDocumentClick);
      document.addEventListener('keydown', this._onEscapePress);
      if (parent.classList.contains('is-open')) {
        parent.classList.remove('is-open');
      } else {
        parent.classList.add('is-open');
      }
    }
  }, {
    key: "_onSelectKeydown",
    value: function _onSelectKeydown(evt) {
      var parent = evt.target.closest('[data-select]');
      parent.classList.remove('is-invalid');
      if (evt.shiftKey && evt.key === 'Tab' && parent.closest('.is-open')) {
        this._closeSelect();
      }
    }
  }, {
    key: "_setActiveSelectItemsState",
    value: function _setActiveSelectItemsState(multiple, selectItems) {
      var _this = this;
      var flag = true;
      this._activeIndex = [];
      selectItems.forEach(function (item, index) {
        if (multiple) {
          if (item.getAttribute('aria-selected') === 'true') {
            _this._activeIndex.push(index);
          }
        } else {
          if (item.getAttribute('aria-selected') === 'true' && flag) {
            _this._activeIndex.push(index);
            flag = false;
          } else {
            item.setAttribute('aria-selected', 'false');
          }
        }
      });
    }
  }, {
    key: "_createSelectStructure",
    value: function _createSelectStructure(item) {
      var nativeSelect = item.querySelector('select');
      if (nativeSelect) {
        this._selectElement = null;
        return;
      }
      var options = {};
      options.items = [];
      var multiple = item.dataset.multiple;
      var id = item.dataset.id;
      var name = item.dataset.name;
      var required = item.dataset.required;
      var insert = item.dataset.insert;
      var selectItems = item.querySelectorAll('.custom-select__item');
      this._setActiveSelectItemsState(multiple, selectItems);
      if (this._activeIndex.length) {
        options.activeIndex = this._activeIndex;
        this._setSelectActiveState(multiple, insert, item);
      }
      options.name = name || false;
      options.id = id || false;
      options.required = Boolean(required);
      options.multiple = Boolean(multiple);
      selectItems.forEach(function (selectItem) {
        var value = selectItem.dataset.selectValue;
        var itemInfo = {};
        itemInfo.text = selectItem.textContent;
        itemInfo.value = value;
        options.items.push(itemInfo);
      });
      Object(_utils_render__WEBPACK_IMPORTED_MODULE_0__["renderElement"])(item, Object(_utils_render__WEBPACK_IMPORTED_MODULE_0__["createElement"])(Object(_create_select_markup__WEBPACK_IMPORTED_MODULE_1__["createNativeSelectMarkup"])(options)));
      this._selectElement = item;
      this._activeIndex = null;
    }
  }, {
    key: "_setSelectAction",
    value: function _setSelectAction() {
      var _this2 = this;
      if (!this._selectElement) {
        return;
      }
      var button = this._selectElement.querySelector('.custom-select__button');
      var selectItems = this._selectElement.querySelectorAll('.custom-select__item');
      button.addEventListener('click', this._onSelectClick);
      button.addEventListener('keydown', this._onSelectKeydown);
      selectItems.forEach(function (element, index) {
        element.addEventListener('click', function () {
          _this2._onSelectItemClick(element, index);
        });
        element.addEventListener('keydown', function (evt) {
          _this2._onSelectItemKeydown(evt, element, index);
        });
        if (index === selectItems.length - 1) {
          element.addEventListener('keydown', _this2._onLastItemKeydown);
        }
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this3 = this;
      this._selects = document.querySelectorAll('[data-select]');
      this._selects.forEach(function (select) {
        _this3._createSelectStructure(select);
        _this3._setSelectAction();
      });
    }
  }]);
  return CustomSelect;
}();

/***/ }),

/***/ "./js/modules/timer.js":
/*!*****************************!*\
  !*** ./js/modules/timer.js ***!
  \*****************************/
/*! exports provided: startTimer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTimer", function() { return startTimer; });
function startTimer() {
  var display = document.querySelector('[data-discount-timer]');
  var duration = 60 * 30; // ss * mm * hh
  var timer = duration;
  var hours = 0;
  var minutes = 0;
  var seconds = 0;
  setInterval(function () {
    hours = parseInt(timer / 3600, 10);
    minutes = parseInt(timer % 3600 / 60, 10);
    seconds = parseInt(timer % 60, 10);
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    display.querySelector('[data-discount-hh]').textContent = hours;
    display.querySelector('[data-discount-mm]').textContent = minutes;
    display.querySelector('[data-discount-ss]').textContent = seconds;
    if (--timer < 0) {
      timer = duration;
    }
  }, 1000);
}

/***/ }),

/***/ "./js/utils/focus-lock.js":
/*!********************************!*\
  !*** ./js/utils/focus-lock.js ***!
  \********************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);
    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }
  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;
      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }
        if (this._focusableElements.length === 1) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
      }
      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();
        this._focusableElements[0].focus();
      }
      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();
        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);
      if (!lockedElement) {
        return;
      }
      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;
      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];
      if (this._endElement) {
        this._endElement.blur();
      }
      if (startElement && startFocus) {
        startElement.focus();
      }
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }
      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);
  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/mobile-vh-fix.js":
/*!***********************************!*\
  !*** ./js/utils/mobile-vh-fix.js ***!
  \***********************************/
/*! exports provided: mobileVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mobileVhFix", function() { return mobileVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");

var mobileVhFix = function mobileVhFix() {
  var isMobile = /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  var isIE = !!window.MSInputMethodContext && !!document.documentMode;
  if (!isIE && (isMobile || Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])())) {
    var updateViewportHeight = function updateViewportHeight() {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
    };
    updateViewportHeight();
    window.addEventListener('resize', updateViewportHeight);
  }
};


/***/ }),

/***/ "./js/utils/render.js":
/*!****************************!*\
  !*** ./js/utils/render.js ***!
  \****************************/
/*! exports provided: createElement, renderElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderElement", function() { return renderElement; });
var createElement = function createElement(template) {
  var newElement = document.createElement('div');
  newElement.innerHTML = template;
  return newElement.firstChild;
};
var renderElement = function renderElement(container, component) {
  var place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'beforeend';
  switch (place) {
    case 'prepend':
      container.prepend(component);
      break;
    case 'afterend':
      container.after(component);
      break;
    case 'beforeend':
      container.append(component);
      break;
  }
};

/***/ }),

/***/ "./js/vendor/scroll-lock.min.js":
/*!**************************************!*\
  !*** ./js/vendor/scroll-lock.min.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
!function (e, t) {
  "object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  return function (l) {
    var r = {};
    function o(e) {
      if (r[e]) return r[e].exports;
      var t = r[e] = {
        i: e,
        l: !1,
        exports: {}
      };
      return l[e].call(t.exports, t, t.exports, o), t.l = !0, t.exports;
    }
    return o.m = l, o.c = r, o.d = function (e, t, l) {
      o.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: l
      });
    }, o.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, o.t = function (t, e) {
      if (1 & e && (t = o(t)), 8 & e) return t;
      if (4 & e && "object" == _typeof(t) && t && t.__esModule) return t;
      var l = Object.create(null);
      if (o.r(l), Object.defineProperty(l, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var r in t) o.d(l, r, function (e) {
        return t[e];
      }.bind(null, r));
      return l;
    }, o.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return o.d(t, "a", t), t;
    }, o.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, o.p = "", o(o.s = 0);
  }([function (e, t, l) {
    "use strict";

    l.r(t);
    var r = function r(e) {
        return Array.isArray(e) ? e : [e];
      },
      a = function a(e) {
        return e instanceof Node;
      },
      o = function o(e, t) {
        if (e && t) {
          e = e instanceof NodeList ? e : [e];
          for (var l = 0; l < e.length && !0 !== t(e[l], l, e.length); l++);
        }
      },
      n = function n(e) {
        return console.error("[scroll-lock] ".concat(e));
      },
      b = function b(e) {
        if (Array.isArray(e)) return e.join(", ");
      },
      c = function c(e) {
        var t = [];
        return o(e, function (e) {
          return t.push(e);
        }), t;
      },
      h = function h(e, t) {
        var l = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2],
          r = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : document;
        if (l && -1 !== c(r.querySelectorAll(t)).indexOf(e)) return e;
        for (; (e = e.parentElement) && -1 === c(r.querySelectorAll(t)).indexOf(e););
        return e;
      },
      v = function v(e, t) {
        var l = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : document;
        return -1 !== c(l.querySelectorAll(t)).indexOf(e);
      },
      i = function i(e) {
        if (e) return "hidden" === getComputedStyle(e).overflow;
      },
      m = function m(e) {
        if (e) return !!i(e) || e.scrollTop <= 0;
      },
      S = function S(e) {
        if (e) {
          if (i(e)) return !0;
          var t = e.scrollTop;
          return e.scrollHeight <= t + e.offsetHeight;
        }
      },
      y = function y(e) {
        if (e) return !!i(e) || e.scrollLeft <= 0;
      },
      k = function k(e) {
        if (e) {
          if (i(e)) return !0;
          var t = e.scrollLeft;
          return e.scrollWidth <= t + e.offsetWidth;
        }
      };
    l.d(t, "disablePageScroll", function () {
      return d;
    }), l.d(t, "enablePageScroll", function () {
      return s;
    }), l.d(t, "getScrollState", function () {
      return f;
    }), l.d(t, "clearQueueScrollLocks", function () {
      return p;
    }), l.d(t, "getTargetScrollBarWidth", function () {
      return g;
    }), l.d(t, "getCurrentTargetScrollBarWidth", function () {
      return A;
    }), l.d(t, "getPageScrollBarWidth", function () {
      return G;
    }), l.d(t, "getCurrentPageScrollBarWidth", function () {
      return T;
    }), l.d(t, "addScrollableTarget", function () {
      return L;
    }), l.d(t, "removeScrollableTarget", function () {
      return W;
    }), l.d(t, "addScrollableSelector", function () {
      return x;
    }), l.d(t, "removeScrollableSelector", function () {
      return F;
    }), l.d(t, "addLockableTarget", function () {
      return Y;
    }), l.d(t, "addLockableSelector", function () {
      return E;
    }), l.d(t, "setFillGapMethod", function () {
      return O;
    }), l.d(t, "addFillGapTarget", function () {
      return P;
    }), l.d(t, "removeFillGapTarget", function () {
      return j;
    }), l.d(t, "addFillGapSelector", function () {
      return q;
    }), l.d(t, "removeFillGapSelector", function () {
      return M;
    }), l.d(t, "refillGaps", function () {
      return N;
    });
    var u = ["padding", "margin", "width", "max-width", "none"],
      w = {
        scroll: !0,
        queue: 0,
        scrollableSelectors: ["[data-scroll-lock-scrollable]"],
        lockableSelectors: ["body", "[data-scroll-lock-lockable]"],
        fillGapSelectors: ["body", "[data-scroll-lock-fill-gap]", "[data-scroll-lock-lockable]"],
        fillGapMethod: u[0],
        startTouchY: 0,
        startTouchX: 0
      },
      d = function d(e) {
        w.queue <= 0 && (w.scroll = !1, B(), X()), L(e), w.queue++;
      },
      s = function s(e) {
        0 < w.queue && w.queue--, w.queue <= 0 && (w.scroll = !0, C(), Q()), W(e);
      },
      f = function f() {
        return w.scroll;
      },
      p = function p() {
        w.queue = 0;
      },
      g = function g(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
        if (a(e)) {
          var l = e.style.overflowY;
          t ? f() || (e.style.overflowY = e.getAttribute("data-scroll-lock-saved-overflow-y-property")) : e.style.overflowY = "scroll";
          var r = A(e);
          return e.style.overflowY = l, r;
        }
        return 0;
      },
      A = function A(e) {
        if (a(e)) {
          if (e === document.body) {
            var t = document.documentElement.clientWidth;
            return window.innerWidth - t;
          }
          var l = e.style.borderLeftWidth,
            r = e.style.borderRightWidth;
          e.style.borderLeftWidth = "0px", e.style.borderRightWidth = "0px";
          var o = e.offsetWidth - e.clientWidth;
          return e.style.borderLeftWidth = l, e.style.borderRightWidth = r, o;
        }
        return 0;
      },
      G = function G() {
        var e = 0 < arguments.length && void 0 !== arguments[0] && arguments[0];
        return g(document.body, e);
      },
      T = function T() {
        return A(document.body);
      },
      L = function L(e) {
        e && r(e).map(function (e) {
          o(e, function (e) {
            a(e) ? e.setAttribute("data-scroll-lock-scrollable", "") : n('"'.concat(e, '" is not a Element.'));
          });
        });
      },
      W = function W(e) {
        e && r(e).map(function (e) {
          o(e, function (e) {
            a(e) ? e.removeAttribute("data-scroll-lock-scrollable") : n('"'.concat(e, '" is not a Element.'));
          });
        });
      },
      x = function x(e) {
        e && r(e).map(function (e) {
          w.scrollableSelectors.push(e);
        });
      },
      F = function F(e) {
        e && r(e).map(function (t) {
          w.scrollableSelectors = w.scrollableSelectors.filter(function (e) {
            return e !== t;
          });
        });
      },
      Y = function Y(e) {
        e && (r(e).map(function (e) {
          o(e, function (e) {
            a(e) ? e.setAttribute("data-scroll-lock-lockable", "") : n('"'.concat(e, '" is not a Element.'));
          });
        }), f() || B());
      },
      E = function E(e) {
        e && (r(e).map(function (e) {
          w.lockableSelectors.push(e);
        }), f() || B(), q(e));
      },
      O = function O(e) {
        if (e) if (-1 !== u.indexOf(e)) w.fillGapMethod = e, N();else {
          var t = u.join(", ");
          n('"'.concat(e, '" method is not available!\nAvailable fill gap methods: ').concat(t, "."));
        }
      },
      P = function P(e) {
        e && r(e).map(function (e) {
          o(e, function (e) {
            a(e) ? (e.setAttribute("data-scroll-lock-fill-gap", ""), w.scroll || H(e)) : n('"'.concat(e, '" is not a Element.'));
          });
        });
      },
      j = function j(e) {
        e && r(e).map(function (e) {
          o(e, function (e) {
            a(e) ? (e.removeAttribute("data-scroll-lock-fill-gap"), w.scroll || I(e)) : n('"'.concat(e, '" is not a Element.'));
          });
        });
      },
      q = function q(e) {
        e && r(e).map(function (e) {
          -1 === w.fillGapSelectors.indexOf(e) && (w.fillGapSelectors.push(e), w.scroll || D(e));
        });
      },
      M = function M(e) {
        e && r(e).map(function (t) {
          w.fillGapSelectors = w.fillGapSelectors.filter(function (e) {
            return e !== t;
          }), w.scroll || z(t);
        });
      },
      N = function N() {
        w.scroll || X();
      },
      B = function B() {
        var e = b(w.lockableSelectors);
        K(e);
      },
      C = function C() {
        var e = b(w.lockableSelectors);
        R(e);
      },
      K = function K(e) {
        var t = document.querySelectorAll(e);
        o(t, function (e) {
          U(e);
        });
      },
      R = function R(e) {
        var t = document.querySelectorAll(e);
        o(t, function (e) {
          _(e);
        });
      },
      U = function U(e) {
        if (a(e) && "true" !== e.getAttribute("data-scroll-lock-locked")) {
          var t = window.getComputedStyle(e);
          e.setAttribute("data-scroll-lock-saved-overflow-y-property", t.overflowY), e.setAttribute("data-scroll-lock-saved-inline-overflow-property", e.style.overflow), e.setAttribute("data-scroll-lock-saved-inline-overflow-y-property", e.style.overflowY), e.style.overflow = "hidden", e.setAttribute("data-scroll-lock-locked", "true");
        }
      },
      _ = function _(e) {
        a(e) && "true" === e.getAttribute("data-scroll-lock-locked") && (e.style.overflow = e.getAttribute("data-scroll-lock-saved-inline-overflow-property"), e.style.overflowY = e.getAttribute("data-scroll-lock-saved-inline-overflow-y-property"), e.removeAttribute("data-scroll-lock-saved-overflow-property"), e.removeAttribute("data-scroll-lock-saved-inline-overflow-property"), e.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property"), e.removeAttribute("data-scroll-lock-locked"));
      },
      X = function X() {
        w.fillGapSelectors.map(function (e) {
          D(e);
        });
      },
      Q = function Q() {
        w.fillGapSelectors.map(function (e) {
          z(e);
        });
      },
      D = function D(e) {
        var t = document.querySelectorAll(e),
          l = -1 !== w.lockableSelectors.indexOf(e);
        o(t, function (e) {
          H(e, l);
        });
      },
      H = function H(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
        if (a(e)) {
          var l;
          if ("" === e.getAttribute("data-scroll-lock-lockable") || t) l = g(e, !0);else {
            var r = h(e, b(w.lockableSelectors));
            l = g(r, !0);
          }
          "true" === e.getAttribute("data-scroll-lock-filled-gap") && I(e);
          var o = window.getComputedStyle(e);
          if (e.setAttribute("data-scroll-lock-filled-gap", "true"), e.setAttribute("data-scroll-lock-current-fill-gap-method", w.fillGapMethod), "margin" === w.fillGapMethod) {
            var n = parseFloat(o.marginRight);
            e.style.marginRight = "".concat(n + l, "px");
          } else if ("width" === w.fillGapMethod) e.style.width = "calc(100% - ".concat(l, "px)");else if ("max-width" === w.fillGapMethod) e.style.maxWidth = "calc(100% - ".concat(l, "px)");else if ("padding" === w.fillGapMethod) {
            var c = parseFloat(o.paddingRight);
            e.style.paddingRight = "".concat(c + l, "px");
          }
        }
      },
      z = function z(e) {
        var t = document.querySelectorAll(e);
        o(t, function (e) {
          I(e);
        });
      },
      I = function I(e) {
        if (a(e) && "true" === e.getAttribute("data-scroll-lock-filled-gap")) {
          var t = e.getAttribute("data-scroll-lock-current-fill-gap-method");
          e.removeAttribute("data-scroll-lock-filled-gap"), e.removeAttribute("data-scroll-lock-current-fill-gap-method"), "margin" === t ? e.style.marginRight = "" : "width" === t ? e.style.width = "" : "max-width" === t ? e.style.maxWidth = "" : "padding" === t && (e.style.paddingRight = "");
        }
      };
    "undefined" != typeof window && window.addEventListener("resize", function (e) {
      N();
    }), "undefined" != typeof document && (document.addEventListener("touchstart", function (e) {
      w.scroll || (w.startTouchY = e.touches[0].clientY, w.startTouchX = e.touches[0].clientX);
    }), document.addEventListener("touchmove", function (n) {
      if (!w.scroll) {
        var e = w.startTouchY,
          t = w.startTouchX,
          l = n.touches[0].clientY,
          r = n.touches[0].clientX;
        if (n.touches.length < 2) {
          var c = b(w.scrollableSelectors),
            a = e < l,
            i = l < e,
            u = t < r,
            d = r < t,
            s = e + 3 < l,
            f = l < e - 3,
            p = t + 3 < r,
            g = r < t - 3;
          !function e(t) {
            var l = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
            if (t) {
              var r = h(t, c, !1);
              if (v(t, 'input[type="range"]')) return !1;
              if (l || v(t, 'textarea, [contenteditable="true"]') && h(t, c) || v(t, c)) {
                var o = !1;
                y(t) && k(t) ? (a && m(t) || i && S(t)) && (o = !0) : m(t) && S(t) ? (u && y(t) || d && k(t)) && (o = !0) : (s && m(t) || f && S(t) || p && y(t) || g && k(t)) && (o = !0), o && (r ? e(r, !0) : n.cancelable && n.preventDefault());
              } else e(r);
            } else n.cancelable && n.preventDefault();
          }(n.target);
        }
      }
    }, {
      passive: !1
    }), document.addEventListener("touchend", function (e) {
      w.scroll || (w.startTouchY = 0, w.startTouchX = 0);
    }));
    var J = {
        hide: function hide(e) {
          n('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget'), d(e);
        },
        show: function show(e) {
          n('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget'), s(e);
        },
        toggle: function toggle(e) {
          n('"toggle" is deprecated! Do not use it.'), f() ? d() : s(e);
        },
        getState: function getState() {
          return n('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate'), f();
        },
        getWidth: function getWidth() {
          return n('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth'), G();
        },
        getCurrentWidth: function getCurrentWidth() {
          return n('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth'), T();
        },
        setScrollableTargets: function setScrollableTargets(e) {
          n('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget'), L(e);
        },
        setFillGapSelectors: function setFillGapSelectors(e) {
          n('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector'), q(e);
        },
        setFillGapTargets: function setFillGapTargets(e) {
          n('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget'), P(e);
        },
        clearQueue: function clearQueue() {
          n('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks'), p();
        }
      },
      V = function (o) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {},
            t = Object.keys(n);
          "function" == typeof Object.getOwnPropertySymbols && (t = t.concat(Object.getOwnPropertySymbols(n).filter(function (e) {
            return Object.getOwnPropertyDescriptor(n, e).enumerable;
          }))), t.forEach(function (e) {
            var t, l, r;
            t = o, r = n[l = e], l in t ? Object.defineProperty(t, l, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : t[l] = r;
          });
        }
        return o;
      }({
        disablePageScroll: d,
        enablePageScroll: s,
        getScrollState: f,
        clearQueueScrollLocks: p,
        getTargetScrollBarWidth: g,
        getCurrentTargetScrollBarWidth: A,
        getPageScrollBarWidth: G,
        getCurrentPageScrollBarWidth: T,
        addScrollableSelector: x,
        removeScrollableSelector: F,
        addScrollableTarget: L,
        removeScrollableTarget: W,
        addLockableSelector: E,
        addLockableTarget: Y,
        addFillGapSelector: q,
        removeFillGapSelector: M,
        addFillGapTarget: P,
        removeFillGapTarget: j,
        setFillGapMethod: O,
        refillGaps: N,
        _state: w
      }, J);
    t.default = V;
  }]).default;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ "../node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./js/vendor/swiper-price.js":
/*!***********************************!*\
  !*** ./js/vendor/swiper-price.js ***!
  \***********************************/
/*! exports provided: initSwiperPrice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSwiperPrice", function() { return initSwiperPrice; });
var initSwiperPrice = function initSwiperPrice() {
  var swiperInstance = null;
  var initSlider = function initSlider() {
    if (window.matchMedia('(max-width: 767px)').matches) {
      if (!swiperInstance) {
        swiperInstance = new Swiper('[data-swiper-price]', {
          direction: 'horizontal',
          loop: false,
          pagination: {
            el: '.swiper-pagination'
          },
          initialSlide: 0,
          slidesPerView: 1
        });
      }
    } else {
      if (swiperInstance) {
        swiperInstance.destroy(true, true);
        swiperInstance = null;
      }
    }
  };
  initSlider();
  window.addEventListener('resize', function () {
    initSlider();
  });
};


/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map